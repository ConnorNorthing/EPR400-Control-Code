
LSRM_Control_Code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003730  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080038dc  080038dc  000138dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080038fc  080038fc  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080038fc  080038fc  000138fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003904  08003904  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003904  08003904  00013904  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003908  08003908  00013908  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  0800390c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020014  2**0
                  CONTENTS
 10 .bss          00002884  20000014  20000014  00020014  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002898  20002898  00020014  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c472  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001c0e  00000000  00000000  0002c4b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b70  00000000  00000000  0002e0c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000a98  00000000  00000000  0002ec38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023b32  00000000  00000000  0002f6d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000cbf8  00000000  00000000  00053202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e03e5  00000000  00000000  0005fdfa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001401df  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002f7c  00000000  00000000  00140234  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000014 	.word	0x20000014
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080038c4 	.word	0x080038c4

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000018 	.word	0x20000018
 80001e8:	080038c4 	.word	0x080038c4

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fe08 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f886 	bl	80005fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f9ac 	bl	800084c <MX_GPIO_Init>
  MX_DMA_Init();
 80004f4:	f000 f98a 	bl	800080c <MX_DMA_Init>
  MX_ADC3_Init();
 80004f8:	f000 f8ea 	bl	80006d0 <MX_ADC3_Init>
  MX_TIM2_Init();
 80004fc:	f000 f93a 	bl	8000774 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adcBuffer, ADC_BufferLength);
 8000500:	f241 3288 	movw	r2, #5000	; 0x1388
 8000504:	4933      	ldr	r1, [pc, #204]	; (80005d4 <main+0xf0>)
 8000506:	4834      	ldr	r0, [pc, #208]	; (80005d8 <main+0xf4>)
 8000508:	f000 fea2 	bl	8001250 <HAL_ADC_Start_DMA>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  while(!__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)){
 800050c:	e05a      	b.n	80005c4 <main+0xe0>
		  motor_ReturnHome();
 800050e:	f000 fbe3 	bl	8000cd8 <motor_ReturnHome>

		  if (forward && !__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8000512:	4b32      	ldr	r3, [pc, #200]	; (80005dc <main+0xf8>)
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d019      	beq.n	800054e <main+0x6a>
 800051a:	4b31      	ldr	r3, [pc, #196]	; (80005e0 <main+0xfc>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000522:	2b00      	cmp	r3, #0
 8000524:	d113      	bne.n	800054e <main+0x6a>
			  run_Forward_Sequence(forwardDistance);
 8000526:	4b2f      	ldr	r3, [pc, #188]	; (80005e4 <main+0x100>)
 8000528:	681b      	ldr	r3, [r3, #0]
 800052a:	4618      	mov	r0, r3
 800052c:	f000 fa44 	bl	80009b8 <run_Forward_Sequence>
			  stop_Motor();
 8000530:	f000 fb72 	bl	8000c18 <stop_Motor>
			  adcDistanceCount = 0;
 8000534:	4b2c      	ldr	r3, [pc, #176]	; (80005e8 <main+0x104>)
 8000536:	2200      	movs	r2, #0
 8000538:	801a      	strh	r2, [r3, #0]
			  forward = 0;
 800053a:	4b28      	ldr	r3, [pc, #160]	; (80005dc <main+0xf8>)
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
			  forwardFinal = 0;
 8000540:	4b2a      	ldr	r3, [pc, #168]	; (80005ec <main+0x108>)
 8000542:	2200      	movs	r2, #0
 8000544:	601a      	str	r2, [r3, #0]
			  reverse = 1;
 8000546:	4b2a      	ldr	r3, [pc, #168]	; (80005f0 <main+0x10c>)
 8000548:	2201      	movs	r2, #1
 800054a:	601a      	str	r2, [r3, #0]
		  if (forward && !__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 800054c:	e03a      	b.n	80005c4 <main+0xe0>
		  }
		  else if(reverse && !__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15)){
 800054e:	4b28      	ldr	r3, [pc, #160]	; (80005f0 <main+0x10c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d019      	beq.n	800058a <main+0xa6>
 8000556:	4b22      	ldr	r3, [pc, #136]	; (80005e0 <main+0xfc>)
 8000558:	695b      	ldr	r3, [r3, #20]
 800055a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800055e:	2b00      	cmp	r3, #0
 8000560:	d113      	bne.n	800058a <main+0xa6>
			  run_Reverse_Sequence(reverseDistance);
 8000562:	4b24      	ldr	r3, [pc, #144]	; (80005f4 <main+0x110>)
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4618      	mov	r0, r3
 8000568:	f000 fabe 	bl	8000ae8 <run_Reverse_Sequence>
			  stop_Motor();
 800056c:	f000 fb54 	bl	8000c18 <stop_Motor>
			  adcDistanceCount = 0;
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <main+0x104>)
 8000572:	2200      	movs	r2, #0
 8000574:	801a      	strh	r2, [r3, #0]
			  reverse = 0;
 8000576:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <main+0x10c>)
 8000578:	2200      	movs	r2, #0
 800057a:	601a      	str	r2, [r3, #0]
			  forward = 0;
 800057c:	4b17      	ldr	r3, [pc, #92]	; (80005dc <main+0xf8>)
 800057e:	2200      	movs	r2, #0
 8000580:	601a      	str	r2, [r3, #0]
			  forwardFinal = 1;
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <main+0x108>)
 8000584:	2201      	movs	r2, #1
 8000586:	601a      	str	r2, [r3, #0]
		  else if(reverse && !__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15)){
 8000588:	e01c      	b.n	80005c4 <main+0xe0>
		  }
		  else if(forwardFinal && !__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <main+0x108>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d018      	beq.n	80005c4 <main+0xe0>
 8000592:	4b13      	ldr	r3, [pc, #76]	; (80005e0 <main+0xfc>)
 8000594:	695b      	ldr	r3, [r3, #20]
 8000596:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800059a:	2b00      	cmp	r3, #0
 800059c:	d112      	bne.n	80005c4 <main+0xe0>
			  run_Forward_Sequence(forwardFinalDistance);
 800059e:	4b16      	ldr	r3, [pc, #88]	; (80005f8 <main+0x114>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4618      	mov	r0, r3
 80005a4:	f000 fa08 	bl	80009b8 <run_Forward_Sequence>
			  stop_Motor();
 80005a8:	f000 fb36 	bl	8000c18 <stop_Motor>
			  adcDistanceCount = 0;
 80005ac:	4b0e      	ldr	r3, [pc, #56]	; (80005e8 <main+0x104>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	801a      	strh	r2, [r3, #0]
			  forwardFinal = 0;
 80005b2:	4b0e      	ldr	r3, [pc, #56]	; (80005ec <main+0x108>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
			  reverse = 0;
 80005b8:	4b0d      	ldr	r3, [pc, #52]	; (80005f0 <main+0x10c>)
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
			  forward = 0;
 80005be:	4b07      	ldr	r3, [pc, #28]	; (80005dc <main+0xf8>)
 80005c0:	2200      	movs	r2, #0
 80005c2:	601a      	str	r2, [r3, #0]
	  while(!__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)){
 80005c4:	4b06      	ldr	r3, [pc, #24]	; (80005e0 <main+0xfc>)
 80005c6:	695b      	ldr	r3, [r3, #20]
 80005c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80005cc:	2b00      	cmp	r3, #0
 80005ce:	d09e      	beq.n	800050e <main+0x2a>
 80005d0:	e7f8      	b.n	80005c4 <main+0xe0>
 80005d2:	bf00      	nop
 80005d4:	2000004c 	.word	0x2000004c
 80005d8:	200027bc 	.word	0x200027bc
 80005dc:	20000000 	.word	0x20000000
 80005e0:	40013c00 	.word	0x40013c00
 80005e4:	2000003c 	.word	0x2000003c
 80005e8:	20000030 	.word	0x20000030
 80005ec:	20000004 	.word	0x20000004
 80005f0:	20000038 	.word	0x20000038
 80005f4:	20000040 	.word	0x20000040
 80005f8:	20000044 	.word	0x20000044

080005fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b094      	sub	sp, #80	; 0x50
 8000600:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000602:	f107 0320 	add.w	r3, r7, #32
 8000606:	2230      	movs	r2, #48	; 0x30
 8000608:	2100      	movs	r1, #0
 800060a:	4618      	mov	r0, r3
 800060c:	f003 f952 	bl	80038b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000610:	f107 030c 	add.w	r3, r7, #12
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
 8000618:	605a      	str	r2, [r3, #4]
 800061a:	609a      	str	r2, [r3, #8]
 800061c:	60da      	str	r2, [r3, #12]
 800061e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000620:	2300      	movs	r3, #0
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	4b28      	ldr	r3, [pc, #160]	; (80006c8 <SystemClock_Config+0xcc>)
 8000626:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000628:	4a27      	ldr	r2, [pc, #156]	; (80006c8 <SystemClock_Config+0xcc>)
 800062a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800062e:	6413      	str	r3, [r2, #64]	; 0x40
 8000630:	4b25      	ldr	r3, [pc, #148]	; (80006c8 <SystemClock_Config+0xcc>)
 8000632:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000634:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000638:	60bb      	str	r3, [r7, #8]
 800063a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800063c:	2300      	movs	r3, #0
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	4b22      	ldr	r3, [pc, #136]	; (80006cc <SystemClock_Config+0xd0>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	4a21      	ldr	r2, [pc, #132]	; (80006cc <SystemClock_Config+0xd0>)
 8000646:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800064a:	6013      	str	r3, [r2, #0]
 800064c:	4b1f      	ldr	r3, [pc, #124]	; (80006cc <SystemClock_Config+0xd0>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000654:	607b      	str	r3, [r7, #4]
 8000656:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000658:	2302      	movs	r3, #2
 800065a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800065c:	2301      	movs	r3, #1
 800065e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000660:	2310      	movs	r3, #16
 8000662:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000664:	2302      	movs	r3, #2
 8000666:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000668:	2300      	movs	r3, #0
 800066a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800066c:	2308      	movs	r3, #8
 800066e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000670:	2390      	movs	r3, #144	; 0x90
 8000672:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000674:	2302      	movs	r3, #2
 8000676:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000678:	2303      	movs	r3, #3
 800067a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800067c:	f107 0320 	add.w	r3, r7, #32
 8000680:	4618      	mov	r0, r3
 8000682:	f001 ffdf 	bl	8002644 <HAL_RCC_OscConfig>
 8000686:	4603      	mov	r3, r0
 8000688:	2b00      	cmp	r3, #0
 800068a:	d001      	beq.n	8000690 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800068c:	f000 fb8c 	bl	8000da8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000690:	230f      	movs	r3, #15
 8000692:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000694:	2302      	movs	r3, #2
 8000696:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800069c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006a0:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006a6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80006a8:	f107 030c 	add.w	r3, r7, #12
 80006ac:	2104      	movs	r1, #4
 80006ae:	4618      	mov	r0, r3
 80006b0:	f002 fa40 	bl	8002b34 <HAL_RCC_ClockConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80006ba:	f000 fb75 	bl	8000da8 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3750      	adds	r7, #80	; 0x50
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
 80006c6:	bf00      	nop
 80006c8:	40023800 	.word	0x40023800
 80006cc:	40007000 	.word	0x40007000

080006d0 <MX_ADC3_Init>:
  * @brief ADC3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC3_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	b084      	sub	sp, #16
 80006d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006d6:	463b      	mov	r3, r7
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
 80006dc:	605a      	str	r2, [r3, #4]
 80006de:	609a      	str	r2, [r3, #8]
 80006e0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC3_Init 1 */

  /* USER CODE END ADC3_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 80006e2:	4b21      	ldr	r3, [pc, #132]	; (8000768 <MX_ADC3_Init+0x98>)
 80006e4:	4a21      	ldr	r2, [pc, #132]	; (800076c <MX_ADC3_Init+0x9c>)
 80006e6:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80006e8:	4b1f      	ldr	r3, [pc, #124]	; (8000768 <MX_ADC3_Init+0x98>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 80006ee:	4b1e      	ldr	r3, [pc, #120]	; (8000768 <MX_ADC3_Init+0x98>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = DISABLE;
 80006f4:	4b1c      	ldr	r3, [pc, #112]	; (8000768 <MX_ADC3_Init+0x98>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 80006fa:	4b1b      	ldr	r3, [pc, #108]	; (8000768 <MX_ADC3_Init+0x98>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000700:	4b19      	ldr	r3, [pc, #100]	; (8000768 <MX_ADC3_Init+0x98>)
 8000702:	2200      	movs	r2, #0
 8000704:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000708:	4b17      	ldr	r3, [pc, #92]	; (8000768 <MX_ADC3_Init+0x98>)
 800070a:	2200      	movs	r2, #0
 800070c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800070e:	4b16      	ldr	r3, [pc, #88]	; (8000768 <MX_ADC3_Init+0x98>)
 8000710:	4a17      	ldr	r2, [pc, #92]	; (8000770 <MX_ADC3_Init+0xa0>)
 8000712:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000714:	4b14      	ldr	r3, [pc, #80]	; (8000768 <MX_ADC3_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 800071a:	4b13      	ldr	r3, [pc, #76]	; (8000768 <MX_ADC3_Init+0x98>)
 800071c:	2201      	movs	r2, #1
 800071e:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000720:	4b11      	ldr	r3, [pc, #68]	; (8000768 <MX_ADC3_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000728:	4b0f      	ldr	r3, [pc, #60]	; (8000768 <MX_ADC3_Init+0x98>)
 800072a:	2201      	movs	r2, #1
 800072c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 800072e:	480e      	ldr	r0, [pc, #56]	; (8000768 <MX_ADC3_Init+0x98>)
 8000730:	f000 fd4a 	bl	80011c8 <HAL_ADC_Init>
 8000734:	4603      	mov	r3, r0
 8000736:	2b00      	cmp	r3, #0
 8000738:	d001      	beq.n	800073e <MX_ADC3_Init+0x6e>
  {
    Error_Handler();
 800073a:	f000 fb35 	bl	8000da8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_13;
 800073e:	230d      	movs	r3, #13
 8000740:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000742:	2301      	movs	r3, #1
 8000744:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000746:	2300      	movs	r3, #0
 8000748:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 800074a:	463b      	mov	r3, r7
 800074c:	4619      	mov	r1, r3
 800074e:	4806      	ldr	r0, [pc, #24]	; (8000768 <MX_ADC3_Init+0x98>)
 8000750:	f000 fe98 	bl	8001484 <HAL_ADC_ConfigChannel>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d001      	beq.n	800075e <MX_ADC3_Init+0x8e>
  {
    Error_Handler();
 800075a:	f000 fb25 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800075e:	bf00      	nop
 8000760:	3710      	adds	r7, #16
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	200027bc 	.word	0x200027bc
 800076c:	40012200 	.word	0x40012200
 8000770:	0f000001 	.word	0x0f000001

08000774 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b086      	sub	sp, #24
 8000778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800077a:	f107 0308 	add.w	r3, r7, #8
 800077e:	2200      	movs	r2, #0
 8000780:	601a      	str	r2, [r3, #0]
 8000782:	605a      	str	r2, [r3, #4]
 8000784:	609a      	str	r2, [r3, #8]
 8000786:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000788:	463b      	mov	r3, r7
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000790:	4b1d      	ldr	r3, [pc, #116]	; (8000808 <MX_TIM2_Init+0x94>)
 8000792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000796:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2;
 8000798:	4b1b      	ldr	r3, [pc, #108]	; (8000808 <MX_TIM2_Init+0x94>)
 800079a:	2202      	movs	r2, #2
 800079c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b1a      	ldr	r3, [pc, #104]	; (8000808 <MX_TIM2_Init+0x94>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1500;
 80007a4:	4b18      	ldr	r3, [pc, #96]	; (8000808 <MX_TIM2_Init+0x94>)
 80007a6:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80007aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007ac:	4b16      	ldr	r3, [pc, #88]	; (8000808 <MX_TIM2_Init+0x94>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007b2:	4b15      	ldr	r3, [pc, #84]	; (8000808 <MX_TIM2_Init+0x94>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b8:	4813      	ldr	r0, [pc, #76]	; (8000808 <MX_TIM2_Init+0x94>)
 80007ba:	f002 fbd5 	bl	8002f68 <HAL_TIM_Base_Init>
 80007be:	4603      	mov	r3, r0
 80007c0:	2b00      	cmp	r3, #0
 80007c2:	d001      	beq.n	80007c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80007c4:	f000 faf0 	bl	8000da8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	4619      	mov	r1, r3
 80007d4:	480c      	ldr	r0, [pc, #48]	; (8000808 <MX_TIM2_Init+0x94>)
 80007d6:	f002 fd8f 	bl	80032f8 <HAL_TIM_ConfigClockSource>
 80007da:	4603      	mov	r3, r0
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d001      	beq.n	80007e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80007e0:	f000 fae2 	bl	8000da8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e4:	2300      	movs	r3, #0
 80007e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e8:	2300      	movs	r3, #0
 80007ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ec:	463b      	mov	r3, r7
 80007ee:	4619      	mov	r1, r3
 80007f0:	4805      	ldr	r0, [pc, #20]	; (8000808 <MX_TIM2_Init+0x94>)
 80007f2:	f002 ffab 	bl	800374c <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80007fc:	f000 fad4 	bl	8000da8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000800:	bf00      	nop
 8000802:	3718      	adds	r7, #24
 8000804:	46bd      	mov	sp, r7
 8000806:	bd80      	pop	{r7, pc}
 8000808:	20002804 	.word	0x20002804

0800080c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b082      	sub	sp, #8
 8000810:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000812:	2300      	movs	r3, #0
 8000814:	607b      	str	r3, [r7, #4]
 8000816:	4b0c      	ldr	r3, [pc, #48]	; (8000848 <MX_DMA_Init+0x3c>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <MX_DMA_Init+0x3c>)
 800081c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000820:	6313      	str	r3, [r2, #48]	; 0x30
 8000822:	4b09      	ldr	r3, [pc, #36]	; (8000848 <MX_DMA_Init+0x3c>)
 8000824:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000826:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800082a:	607b      	str	r3, [r7, #4]
 800082c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800082e:	2200      	movs	r2, #0
 8000830:	2100      	movs	r1, #0
 8000832:	2038      	movs	r0, #56	; 0x38
 8000834:	f001 f98e 	bl	8001b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000838:	2038      	movs	r0, #56	; 0x38
 800083a:	f001 f9a7 	bl	8001b8c <HAL_NVIC_EnableIRQ>

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40023800 	.word	0x40023800

0800084c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800084c:	b580      	push	{r7, lr}
 800084e:	b08a      	sub	sp, #40	; 0x28
 8000850:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000852:	f107 0314 	add.w	r3, r7, #20
 8000856:	2200      	movs	r2, #0
 8000858:	601a      	str	r2, [r3, #0]
 800085a:	605a      	str	r2, [r3, #4]
 800085c:	609a      	str	r2, [r3, #8]
 800085e:	60da      	str	r2, [r3, #12]
 8000860:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000862:	2300      	movs	r3, #0
 8000864:	613b      	str	r3, [r7, #16]
 8000866:	4b3b      	ldr	r3, [pc, #236]	; (8000954 <MX_GPIO_Init+0x108>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a3a      	ldr	r2, [pc, #232]	; (8000954 <MX_GPIO_Init+0x108>)
 800086c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b38      	ldr	r3, [pc, #224]	; (8000954 <MX_GPIO_Init+0x108>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800087e:	2300      	movs	r3, #0
 8000880:	60fb      	str	r3, [r7, #12]
 8000882:	4b34      	ldr	r3, [pc, #208]	; (8000954 <MX_GPIO_Init+0x108>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	4a33      	ldr	r2, [pc, #204]	; (8000954 <MX_GPIO_Init+0x108>)
 8000888:	f043 0304 	orr.w	r3, r3, #4
 800088c:	6313      	str	r3, [r2, #48]	; 0x30
 800088e:	4b31      	ldr	r3, [pc, #196]	; (8000954 <MX_GPIO_Init+0x108>)
 8000890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000892:	f003 0304 	and.w	r3, r3, #4
 8000896:	60fb      	str	r3, [r7, #12]
 8000898:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800089a:	2300      	movs	r3, #0
 800089c:	60bb      	str	r3, [r7, #8]
 800089e:	4b2d      	ldr	r3, [pc, #180]	; (8000954 <MX_GPIO_Init+0x108>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	4a2c      	ldr	r2, [pc, #176]	; (8000954 <MX_GPIO_Init+0x108>)
 80008a4:	f043 0301 	orr.w	r3, r3, #1
 80008a8:	6313      	str	r3, [r2, #48]	; 0x30
 80008aa:	4b2a      	ldr	r3, [pc, #168]	; (8000954 <MX_GPIO_Init+0x108>)
 80008ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ae:	f003 0301 	and.w	r3, r3, #1
 80008b2:	60bb      	str	r3, [r7, #8]
 80008b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008b6:	2300      	movs	r3, #0
 80008b8:	607b      	str	r3, [r7, #4]
 80008ba:	4b26      	ldr	r3, [pc, #152]	; (8000954 <MX_GPIO_Init+0x108>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a25      	ldr	r2, [pc, #148]	; (8000954 <MX_GPIO_Init+0x108>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b23      	ldr	r3, [pc, #140]	; (8000954 <MX_GPIO_Init+0x108>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	607b      	str	r3, [r7, #4]
 80008d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, White_Phase_Pin|Brown_Phase_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	2150      	movs	r1, #80	; 0x50
 80008d6:	4820      	ldr	r0, [pc, #128]	; (8000958 <MX_GPIO_Init+0x10c>)
 80008d8:	f001 fe82 	bl	80025e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Yellow_Phase_GPIO_Port, Yellow_Phase_Pin, GPIO_PIN_RESET);
 80008dc:	2200      	movs	r2, #0
 80008de:	2110      	movs	r1, #16
 80008e0:	481e      	ldr	r0, [pc, #120]	; (800095c <MX_GPIO_Init+0x110>)
 80008e2:	f001 fe7d 	bl	80025e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : White_Phase_Pin Brown_Phase_Pin */
  GPIO_InitStruct.Pin = White_Phase_Pin|Brown_Phase_Pin;
 80008e6:	2350      	movs	r3, #80	; 0x50
 80008e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ea:	2301      	movs	r3, #1
 80008ec:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ee:	2300      	movs	r3, #0
 80008f0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008f2:	2300      	movs	r3, #0
 80008f4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008f6:	f107 0314 	add.w	r3, r7, #20
 80008fa:	4619      	mov	r1, r3
 80008fc:	4816      	ldr	r0, [pc, #88]	; (8000958 <MX_GPIO_Init+0x10c>)
 80008fe:	f001 fcc3 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pin : Yellow_Phase_Pin */
  GPIO_InitStruct.Pin = Yellow_Phase_Pin;
 8000902:	2310      	movs	r3, #16
 8000904:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000906:	2301      	movs	r3, #1
 8000908:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Yellow_Phase_GPIO_Port, &GPIO_InitStruct);
 8000912:	f107 0314 	add.w	r3, r7, #20
 8000916:	4619      	mov	r1, r3
 8000918:	4810      	ldr	r0, [pc, #64]	; (800095c <MX_GPIO_Init+0x110>)
 800091a:	f001 fcb5 	bl	8002288 <HAL_GPIO_Init>

  /*Configure GPIO pins : E_Stop_Interrupt_Pin Right_Limit_Switch_Pin Left_Limit_Switch_Pin */
  GPIO_InitStruct.Pin = E_Stop_Interrupt_Pin|Right_Limit_Switch_Pin|Left_Limit_Switch_Pin;
 800091e:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8000922:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000924:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000928:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800092e:	f107 0314 	add.w	r3, r7, #20
 8000932:	4619      	mov	r1, r3
 8000934:	480a      	ldr	r0, [pc, #40]	; (8000960 <MX_GPIO_Init+0x114>)
 8000936:	f001 fca7 	bl	8002288 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800093a:	2200      	movs	r2, #0
 800093c:	2100      	movs	r1, #0
 800093e:	2028      	movs	r0, #40	; 0x28
 8000940:	f001 f908 	bl	8001b54 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000944:	2028      	movs	r0, #40	; 0x28
 8000946:	f001 f921 	bl	8001b8c <HAL_NVIC_EnableIRQ>

}
 800094a:	bf00      	nop
 800094c:	3728      	adds	r7, #40	; 0x28
 800094e:	46bd      	mov	sp, r7
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	40023800 	.word	0x40023800
 8000958:	40020000 	.word	0x40020000
 800095c:	40020800 	.word	0x40020800
 8000960:	40021400 	.word	0x40021400

08000964 <HAL_ADC_ConvHalfCpltCallback>:
/* USER CODE BEGIN 4 */

/*******************************/
/* Setting up code for the ADC */
/*******************************/
void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000972:	4803      	ldr	r0, [pc, #12]	; (8000980 <HAL_ADC_ConvHalfCpltCallback+0x1c>)
 8000974:	f001 fe34 	bl	80025e0 <HAL_GPIO_WritePin>
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40021800 	.word	0x40021800

08000984 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8000984:	b580      	push	{r7, lr}
 8000986:	b082      	sub	sp, #8
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(GPIOG, GPIO_PIN_14, GPIO_PIN_RESET);
 800098c:	2200      	movs	r2, #0
 800098e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000992:	4806      	ldr	r0, [pc, #24]	; (80009ac <HAL_ADC_ConvCpltCallback+0x28>)
 8000994:	f001 fe24 	bl	80025e0 <HAL_GPIO_WritePin>
	HAL_ADC_Start_DMA(&hadc3, (uint32_t*)adcBuffer, ADC_BufferLength);
 8000998:	f241 3288 	movw	r2, #5000	; 0x1388
 800099c:	4904      	ldr	r1, [pc, #16]	; (80009b0 <HAL_ADC_ConvCpltCallback+0x2c>)
 800099e:	4805      	ldr	r0, [pc, #20]	; (80009b4 <HAL_ADC_ConvCpltCallback+0x30>)
 80009a0:	f000 fc56 	bl	8001250 <HAL_ADC_Start_DMA>
}
 80009a4:	bf00      	nop
 80009a6:	3708      	adds	r7, #8
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	40021800 	.word	0x40021800
 80009b0:	2000004c 	.word	0x2000004c
 80009b4:	200027bc 	.word	0x200027bc

080009b8 <run_Forward_Sequence>:

/*******************************/
/* Forward Operation of Motor  */
/*******************************/
void run_Forward_Sequence(int distance) {
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
 80009be:	6078      	str	r0, [r7, #4]
	 *
	 * Before this can be done, I first need to convert the ADC reading to
	 * a valid distance measurement to tell the forward sequence to know
	 * when to stop cycling. */

	int adcCountReq = distance * MM_PPR_Conversion;
 80009c0:	4b42      	ldr	r3, [pc, #264]	; (8000acc <run_Forward_Sequence+0x114>)
 80009c2:	881b      	ldrh	r3, [r3, #0]
 80009c4:	461a      	mov	r2, r3
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	fb02 f303 	mul.w	r3, r2, r3
 80009cc:	60fb      	str	r3, [r7, #12]

	while (!__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)){
 80009ce:	e071      	b.n	8000ab4 <run_Forward_Sequence+0xfc>
		/* Inside this while loop, I want to cycle through the output pins
		 * connected to the relays controlling which motor segment to excite.
		 */
		if (adcDistanceCount < adcCountReq && forward && !__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 80009d0:	4b3f      	ldr	r3, [pc, #252]	; (8000ad0 <run_Forward_Sequence+0x118>)
 80009d2:	881b      	ldrh	r3, [r3, #0]
 80009d4:	461a      	mov	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	4293      	cmp	r3, r2
 80009da:	dd1f      	ble.n	8000a1c <run_Forward_Sequence+0x64>
 80009dc:	4b3d      	ldr	r3, [pc, #244]	; (8000ad4 <run_Forward_Sequence+0x11c>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d01b      	beq.n	8000a1c <run_Forward_Sequence+0x64>
 80009e4:	4b3c      	ldr	r3, [pc, #240]	; (8000ad8 <run_Forward_Sequence+0x120>)
 80009e6:	695b      	ldr	r3, [r3, #20]
 80009e8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d115      	bne.n	8000a1c <run_Forward_Sequence+0x64>
			/* If all of the criteria for the if statement are met, the first
			 * of the three segments will be excited by writing the digital
			 * output pin high as follows:
			 */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); 	//White
 80009f0:	2201      	movs	r2, #1
 80009f2:	2110      	movs	r1, #16
 80009f4:	4839      	ldr	r0, [pc, #228]	; (8000adc <run_Forward_Sequence+0x124>)
 80009f6:	f001 fdf3 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);	//Brown
 80009fa:	2200      	movs	r2, #0
 80009fc:	2140      	movs	r1, #64	; 0x40
 80009fe:	4837      	ldr	r0, [pc, #220]	; (8000adc <run_Forward_Sequence+0x124>)
 8000a00:	f001 fdee 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//Yellow
 8000a04:	2200      	movs	r2, #0
 8000a06:	2110      	movs	r1, #16
 8000a08:	4835      	ldr	r0, [pc, #212]	; (8000ae0 <run_Forward_Sequence+0x128>)
 8000a0a:	f001 fde9 	bl	80025e0 <HAL_GPIO_WritePin>
			colourSelector = 0;
 8000a0e:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <run_Forward_Sequence+0x12c>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	601a      	str	r2, [r3, #0]
			HAL_Delay(500);
 8000a14:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a18:	f000 fbb2 	bl	8001180 <HAL_Delay>
		}

		if(adcDistanceCount < adcCountReq && forward && !__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8000a1c:	4b2c      	ldr	r3, [pc, #176]	; (8000ad0 <run_Forward_Sequence+0x118>)
 8000a1e:	881b      	ldrh	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	4293      	cmp	r3, r2
 8000a26:	dd1f      	ble.n	8000a68 <run_Forward_Sequence+0xb0>
 8000a28:	4b2a      	ldr	r3, [pc, #168]	; (8000ad4 <run_Forward_Sequence+0x11c>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	2b00      	cmp	r3, #0
 8000a2e:	d01b      	beq.n	8000a68 <run_Forward_Sequence+0xb0>
 8000a30:	4b29      	ldr	r3, [pc, #164]	; (8000ad8 <run_Forward_Sequence+0x120>)
 8000a32:	695b      	ldr	r3, [r3, #20]
 8000a34:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d115      	bne.n	8000a68 <run_Forward_Sequence+0xb0>
			/* If all the criteria for the if statement are met, the next
			 * segment will be excited by writing the digital output pin
			 * high as follows:
			 */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//White
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	2110      	movs	r1, #16
 8000a40:	4826      	ldr	r0, [pc, #152]	; (8000adc <run_Forward_Sequence+0x124>)
 8000a42:	f001 fdcd 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);		//Brown
 8000a46:	2201      	movs	r2, #1
 8000a48:	2140      	movs	r1, #64	; 0x40
 8000a4a:	4824      	ldr	r0, [pc, #144]	; (8000adc <run_Forward_Sequence+0x124>)
 8000a4c:	f001 fdc8 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//Yellow
 8000a50:	2200      	movs	r2, #0
 8000a52:	2110      	movs	r1, #16
 8000a54:	4822      	ldr	r0, [pc, #136]	; (8000ae0 <run_Forward_Sequence+0x128>)
 8000a56:	f001 fdc3 	bl	80025e0 <HAL_GPIO_WritePin>
			colourSelector = 1;
 8000a5a:	4b22      	ldr	r3, [pc, #136]	; (8000ae4 <run_Forward_Sequence+0x12c>)
 8000a5c:	2201      	movs	r2, #1
 8000a5e:	601a      	str	r2, [r3, #0]
			HAL_Delay(500);
 8000a60:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000a64:	f000 fb8c 	bl	8001180 <HAL_Delay>
		}

		if(adcDistanceCount < adcCountReq && forward && !__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_13)){
 8000a68:	4b19      	ldr	r3, [pc, #100]	; (8000ad0 <run_Forward_Sequence+0x118>)
 8000a6a:	881b      	ldrh	r3, [r3, #0]
 8000a6c:	461a      	mov	r2, r3
 8000a6e:	68fb      	ldr	r3, [r7, #12]
 8000a70:	4293      	cmp	r3, r2
 8000a72:	dd1f      	ble.n	8000ab4 <run_Forward_Sequence+0xfc>
 8000a74:	4b17      	ldr	r3, [pc, #92]	; (8000ad4 <run_Forward_Sequence+0x11c>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d01b      	beq.n	8000ab4 <run_Forward_Sequence+0xfc>
 8000a7c:	4b16      	ldr	r3, [pc, #88]	; (8000ad8 <run_Forward_Sequence+0x120>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d115      	bne.n	8000ab4 <run_Forward_Sequence+0xfc>
			/* If all the criteria for the if statement are met, the final
			 * segment of the motor will be excited by writing the digital
			 * output pin high as follows:
			 */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//White
 8000a88:	2200      	movs	r2, #0
 8000a8a:	2110      	movs	r1, #16
 8000a8c:	4813      	ldr	r0, [pc, #76]	; (8000adc <run_Forward_Sequence+0x124>)
 8000a8e:	f001 fda7 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);	//Brown
 8000a92:	2200      	movs	r2, #0
 8000a94:	2140      	movs	r1, #64	; 0x40
 8000a96:	4811      	ldr	r0, [pc, #68]	; (8000adc <run_Forward_Sequence+0x124>)
 8000a98:	f001 fda2 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//Yellow
 8000a9c:	2201      	movs	r2, #1
 8000a9e:	2110      	movs	r1, #16
 8000aa0:	480f      	ldr	r0, [pc, #60]	; (8000ae0 <run_Forward_Sequence+0x128>)
 8000aa2:	f001 fd9d 	bl	80025e0 <HAL_GPIO_WritePin>
			colourSelector = 2;
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <run_Forward_Sequence+0x12c>)
 8000aa8:	2202      	movs	r2, #2
 8000aaa:	601a      	str	r2, [r3, #0]
			HAL_Delay(500);
 8000aac:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000ab0:	f000 fb66 	bl	8001180 <HAL_Delay>
	while (!__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)){
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <run_Forward_Sequence+0x120>)
 8000ab6:	695b      	ldr	r3, [r3, #20]
 8000ab8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d087      	beq.n	80009d0 <run_Forward_Sequence+0x18>
		}
	}
}
 8000ac0:	bf00      	nop
 8000ac2:	bf00      	nop
 8000ac4:	3710      	adds	r7, #16
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	20000032 	.word	0x20000032
 8000ad0:	20000030 	.word	0x20000030
 8000ad4:	20000000 	.word	0x20000000
 8000ad8:	40013c00 	.word	0x40013c00
 8000adc:	40020000 	.word	0x40020000
 8000ae0:	40020800 	.word	0x40020800
 8000ae4:	20000034 	.word	0x20000034

08000ae8 <run_Reverse_Sequence>:

/*******************************/
/* Reverse Operation of Motor  */
/*******************************/

void run_Reverse_Sequence(int distance){
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	6078      	str	r0, [r7, #4]
	 * direction (right to left on the rail)
	 *
	 * Again, the ADC PPR value needs to be determined first to allow the
	 * function to determine when the reverse sequence needs to stop running:*/

	int adcCountReq = distance * MM_PPR_Conversion;
 8000af0:	4b42      	ldr	r3, [pc, #264]	; (8000bfc <run_Reverse_Sequence+0x114>)
 8000af2:	881b      	ldrh	r3, [r3, #0]
 8000af4:	461a      	mov	r2, r3
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	fb02 f303 	mul.w	r3, r2, r3
 8000afc:	60fb      	str	r3, [r7, #12]

	while (!__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)) {
 8000afe:	e071      	b.n	8000be4 <run_Reverse_Sequence+0xfc>
		/* Inside this while loop, I want to cycle through the output pins
		 * connected to the relays controlling which motor segment to excite.
		 * I first need to do the timing considerations before I can program
		 * the cycling sequence. */

		if (adcDistanceCount < adcCountReq && forward && !__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15)){
 8000b00:	4b3f      	ldr	r3, [pc, #252]	; (8000c00 <run_Reverse_Sequence+0x118>)
 8000b02:	881b      	ldrh	r3, [r3, #0]
 8000b04:	461a      	mov	r2, r3
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	dd1f      	ble.n	8000b4c <run_Reverse_Sequence+0x64>
 8000b0c:	4b3d      	ldr	r3, [pc, #244]	; (8000c04 <run_Reverse_Sequence+0x11c>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d01b      	beq.n	8000b4c <run_Reverse_Sequence+0x64>
 8000b14:	4b3c      	ldr	r3, [pc, #240]	; (8000c08 <run_Reverse_Sequence+0x120>)
 8000b16:	695b      	ldr	r3, [r3, #20]
 8000b18:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d115      	bne.n	8000b4c <run_Reverse_Sequence+0x64>
			/* If all of the criteria for the if statement are met, the first
			 * of the three segments will be excited by writing the digital
			 * output pin high as follows:
			 */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//White
 8000b20:	2200      	movs	r2, #0
 8000b22:	2110      	movs	r1, #16
 8000b24:	4839      	ldr	r0, [pc, #228]	; (8000c0c <run_Reverse_Sequence+0x124>)
 8000b26:	f001 fd5b 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);	//Brown
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2140      	movs	r1, #64	; 0x40
 8000b2e:	4837      	ldr	r0, [pc, #220]	; (8000c0c <run_Reverse_Sequence+0x124>)
 8000b30:	f001 fd56 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//Yellow
 8000b34:	2201      	movs	r2, #1
 8000b36:	2110      	movs	r1, #16
 8000b38:	4835      	ldr	r0, [pc, #212]	; (8000c10 <run_Reverse_Sequence+0x128>)
 8000b3a:	f001 fd51 	bl	80025e0 <HAL_GPIO_WritePin>
			colourSelector = 2;
 8000b3e:	4b35      	ldr	r3, [pc, #212]	; (8000c14 <run_Reverse_Sequence+0x12c>)
 8000b40:	2202      	movs	r2, #2
 8000b42:	601a      	str	r2, [r3, #0]
			HAL_Delay(500);
 8000b44:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b48:	f000 fb1a 	bl	8001180 <HAL_Delay>
		}

		if(adcDistanceCount < adcCountReq && forward && !__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15)){
 8000b4c:	4b2c      	ldr	r3, [pc, #176]	; (8000c00 <run_Reverse_Sequence+0x118>)
 8000b4e:	881b      	ldrh	r3, [r3, #0]
 8000b50:	461a      	mov	r2, r3
 8000b52:	68fb      	ldr	r3, [r7, #12]
 8000b54:	4293      	cmp	r3, r2
 8000b56:	dd1f      	ble.n	8000b98 <run_Reverse_Sequence+0xb0>
 8000b58:	4b2a      	ldr	r3, [pc, #168]	; (8000c04 <run_Reverse_Sequence+0x11c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d01b      	beq.n	8000b98 <run_Reverse_Sequence+0xb0>
 8000b60:	4b29      	ldr	r3, [pc, #164]	; (8000c08 <run_Reverse_Sequence+0x120>)
 8000b62:	695b      	ldr	r3, [r3, #20]
 8000b64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b68:	2b00      	cmp	r3, #0
 8000b6a:	d115      	bne.n	8000b98 <run_Reverse_Sequence+0xb0>
			/* If all the criteria for the if statement are met, the next
			 * segment will be excited by writing the digital output pin
			 * high as follows:
			 */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//White
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	2110      	movs	r1, #16
 8000b70:	4826      	ldr	r0, [pc, #152]	; (8000c0c <run_Reverse_Sequence+0x124>)
 8000b72:	f001 fd35 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);		//Brown
 8000b76:	2201      	movs	r2, #1
 8000b78:	2140      	movs	r1, #64	; 0x40
 8000b7a:	4824      	ldr	r0, [pc, #144]	; (8000c0c <run_Reverse_Sequence+0x124>)
 8000b7c:	f001 fd30 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//Yellow
 8000b80:	2200      	movs	r2, #0
 8000b82:	2110      	movs	r1, #16
 8000b84:	4822      	ldr	r0, [pc, #136]	; (8000c10 <run_Reverse_Sequence+0x128>)
 8000b86:	f001 fd2b 	bl	80025e0 <HAL_GPIO_WritePin>
			colourSelector = 1;
 8000b8a:	4b22      	ldr	r3, [pc, #136]	; (8000c14 <run_Reverse_Sequence+0x12c>)
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	601a      	str	r2, [r3, #0]
			HAL_Delay(500);
 8000b90:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000b94:	f000 faf4 	bl	8001180 <HAL_Delay>
		}

		if(adcDistanceCount < adcCountReq && forward && !__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_15)){
 8000b98:	4b19      	ldr	r3, [pc, #100]	; (8000c00 <run_Reverse_Sequence+0x118>)
 8000b9a:	881b      	ldrh	r3, [r3, #0]
 8000b9c:	461a      	mov	r2, r3
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	dd1f      	ble.n	8000be4 <run_Reverse_Sequence+0xfc>
 8000ba4:	4b17      	ldr	r3, [pc, #92]	; (8000c04 <run_Reverse_Sequence+0x11c>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	2b00      	cmp	r3, #0
 8000baa:	d01b      	beq.n	8000be4 <run_Reverse_Sequence+0xfc>
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <run_Reverse_Sequence+0x120>)
 8000bae:	695b      	ldr	r3, [r3, #20]
 8000bb0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d115      	bne.n	8000be4 <run_Reverse_Sequence+0xfc>
			/* If all the criteria for the if statement are met, the final
			 * segment of the motor will be excited by writing the digital
			 * output pin high as follows:
			 */
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		//White
 8000bb8:	2201      	movs	r2, #1
 8000bba:	2110      	movs	r1, #16
 8000bbc:	4813      	ldr	r0, [pc, #76]	; (8000c0c <run_Reverse_Sequence+0x124>)
 8000bbe:	f001 fd0f 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);	//Brown
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	2140      	movs	r1, #64	; 0x40
 8000bc6:	4811      	ldr	r0, [pc, #68]	; (8000c0c <run_Reverse_Sequence+0x124>)
 8000bc8:	f001 fd0a 	bl	80025e0 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//Yellow
 8000bcc:	2200      	movs	r2, #0
 8000bce:	2110      	movs	r1, #16
 8000bd0:	480f      	ldr	r0, [pc, #60]	; (8000c10 <run_Reverse_Sequence+0x128>)
 8000bd2:	f001 fd05 	bl	80025e0 <HAL_GPIO_WritePin>
			colourSelector = 0;
 8000bd6:	4b0f      	ldr	r3, [pc, #60]	; (8000c14 <run_Reverse_Sequence+0x12c>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
			HAL_Delay(500);
 8000bdc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000be0:	f000 face 	bl	8001180 <HAL_Delay>
	while (!__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)) {
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <run_Reverse_Sequence+0x120>)
 8000be6:	695b      	ldr	r3, [r3, #20]
 8000be8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d087      	beq.n	8000b00 <run_Reverse_Sequence+0x18>
		}
	}
}
 8000bf0:	bf00      	nop
 8000bf2:	bf00      	nop
 8000bf4:	3710      	adds	r7, #16
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
 8000bfa:	bf00      	nop
 8000bfc:	20000032 	.word	0x20000032
 8000c00:	20000030 	.word	0x20000030
 8000c04:	20000000 	.word	0x20000000
 8000c08:	40013c00 	.word	0x40013c00
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40020800 	.word	0x40020800
 8000c14:	20000034 	.word	0x20000034

08000c18 <stop_Motor>:

/*******************************/
/*   Stop Operation of Motor   */
/*******************************/

void stop_Motor(){
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	/* The objective of this function is to excite a single segment of the motor
	 * that was last excited to stop the motor from moving. Essentially, I
	 * need to know which segment was excited last and then hold the excitation
	 * on that segment until  a new distance command is called or provided.*/

	while (colourSelector == 0 && !stop_reset){
 8000c1c:	e012      	b.n	8000c44 <stop_Motor+0x2c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);		//White
 8000c1e:	2201      	movs	r2, #1
 8000c20:	2110      	movs	r1, #16
 8000c22:	4829      	ldr	r0, [pc, #164]	; (8000cc8 <stop_Motor+0xb0>)
 8000c24:	f001 fcdc 	bl	80025e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);	//Brown
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2140      	movs	r1, #64	; 0x40
 8000c2c:	4826      	ldr	r0, [pc, #152]	; (8000cc8 <stop_Motor+0xb0>)
 8000c2e:	f001 fcd7 	bl	80025e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//Yellow
 8000c32:	2200      	movs	r2, #0
 8000c34:	2110      	movs	r1, #16
 8000c36:	4825      	ldr	r0, [pc, #148]	; (8000ccc <stop_Motor+0xb4>)
 8000c38:	f001 fcd2 	bl	80025e0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000c3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c40:	f000 fa9e 	bl	8001180 <HAL_Delay>
	while (colourSelector == 0 && !stop_reset){
 8000c44:	4b22      	ldr	r3, [pc, #136]	; (8000cd0 <stop_Motor+0xb8>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d117      	bne.n	8000c7c <stop_Motor+0x64>
 8000c4c:	4b21      	ldr	r3, [pc, #132]	; (8000cd4 <stop_Motor+0xbc>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	d0e4      	beq.n	8000c1e <stop_Motor+0x6>
	}

	while (colourSelector == 1 && !stop_reset){
 8000c54:	e012      	b.n	8000c7c <stop_Motor+0x64>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//White
 8000c56:	2200      	movs	r2, #0
 8000c58:	2110      	movs	r1, #16
 8000c5a:	481b      	ldr	r0, [pc, #108]	; (8000cc8 <stop_Motor+0xb0>)
 8000c5c:	f001 fcc0 	bl	80025e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);		//Brown
 8000c60:	2201      	movs	r2, #1
 8000c62:	2140      	movs	r1, #64	; 0x40
 8000c64:	4818      	ldr	r0, [pc, #96]	; (8000cc8 <stop_Motor+0xb0>)
 8000c66:	f001 fcbb 	bl	80025e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//Yellow
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2110      	movs	r1, #16
 8000c6e:	4817      	ldr	r0, [pc, #92]	; (8000ccc <stop_Motor+0xb4>)
 8000c70:	f001 fcb6 	bl	80025e0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000c74:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c78:	f000 fa82 	bl	8001180 <HAL_Delay>
	while (colourSelector == 1 && !stop_reset){
 8000c7c:	4b14      	ldr	r3, [pc, #80]	; (8000cd0 <stop_Motor+0xb8>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	2b01      	cmp	r3, #1
 8000c82:	d117      	bne.n	8000cb4 <stop_Motor+0x9c>
 8000c84:	4b13      	ldr	r3, [pc, #76]	; (8000cd4 <stop_Motor+0xbc>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d0e4      	beq.n	8000c56 <stop_Motor+0x3e>
	}

	while (colourSelector == 2 && !stop_reset){
 8000c8c:	e012      	b.n	8000cb4 <stop_Motor+0x9c>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//White
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2110      	movs	r1, #16
 8000c92:	480d      	ldr	r0, [pc, #52]	; (8000cc8 <stop_Motor+0xb0>)
 8000c94:	f001 fca4 	bl	80025e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);	//Brown
 8000c98:	2200      	movs	r2, #0
 8000c9a:	2140      	movs	r1, #64	; 0x40
 8000c9c:	480a      	ldr	r0, [pc, #40]	; (8000cc8 <stop_Motor+0xb0>)
 8000c9e:	f001 fc9f 	bl	80025e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_SET);		//Yellow
 8000ca2:	2201      	movs	r2, #1
 8000ca4:	2110      	movs	r1, #16
 8000ca6:	4809      	ldr	r0, [pc, #36]	; (8000ccc <stop_Motor+0xb4>)
 8000ca8:	f001 fc9a 	bl	80025e0 <HAL_GPIO_WritePin>
		HAL_Delay(1000);
 8000cac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cb0:	f000 fa66 	bl	8001180 <HAL_Delay>
	while (colourSelector == 2 && !stop_reset){
 8000cb4:	4b06      	ldr	r3, [pc, #24]	; (8000cd0 <stop_Motor+0xb8>)
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d103      	bne.n	8000cc4 <stop_Motor+0xac>
 8000cbc:	4b05      	ldr	r3, [pc, #20]	; (8000cd4 <stop_Motor+0xbc>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	d0e4      	beq.n	8000c8e <stop_Motor+0x76>
	 */

	/* I think using a delay should work well enough just to "pause" the motor for long
	 * enough until the motor needs to move again.
	 */
}
 8000cc4:	bf00      	nop
 8000cc6:	bd80      	pop	{r7, pc}
 8000cc8:	40020000 	.word	0x40020000
 8000ccc:	40020800 	.word	0x40020800
 8000cd0:	20000034 	.word	0x20000034
 8000cd4:	20000048 	.word	0x20000048

08000cd8 <motor_ReturnHome>:

/**********************************/
/* Return Home Operation of Motor */
/**********************************/

void motor_ReturnHome(){
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	/* The objective of this function is to move the motor from any position on the
	 * motor rail back to the left-most position on the rail and only stop once
	 * the left-most limit switch has been triggered.
	 */

	if (!__HAL_GPIO_EXTI_GET_FLAG(GPIO_PIN_11)){
 8000cdc:	4b05      	ldr	r3, [pc, #20]	; (8000cf4 <motor_ReturnHome+0x1c>)
 8000cde:	695b      	ldr	r3, [r3, #20]
 8000ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000ce4:	2b00      	cmp	r3, #0
 8000ce6:	d103      	bne.n	8000cf0 <motor_ReturnHome+0x18>
		run_Reverse_Sequence(1000);
 8000ce8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cec:	f7ff fefc 	bl	8000ae8 <run_Reverse_Sequence>
	}
}
 8000cf0:	bf00      	nop
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	40013c00 	.word	0x40013c00

08000cf8 <HAL_GPIO_EXTI_Callback>:

/*****************************/
/* Interrupt Service Routine */
/*****************************/

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	80fb      	strh	r3, [r7, #6]
	/* The first interrupt with the highest priority that I want to set up is the
	 * E-stop. This interrupt is slightly different because the button will stay
	 * depressed for a longer period of time and needs to be manually disengaged:
	 */

	while (GPIO_Pin == GPIO_PIN_11){
 8000d02:	e00e      	b.n	8000d22 <HAL_GPIO_EXTI_Callback+0x2a>
		//Turn off all motor outputs
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);	//White
 8000d04:	2200      	movs	r2, #0
 8000d06:	2110      	movs	r1, #16
 8000d08:	4819      	ldr	r0, [pc, #100]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d0a:	f001 fc69 	bl	80025e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_RESET);	//Brown
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2140      	movs	r1, #64	; 0x40
 8000d12:	4817      	ldr	r0, [pc, #92]	; (8000d70 <HAL_GPIO_EXTI_Callback+0x78>)
 8000d14:	f001 fc64 	bl	80025e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_4, GPIO_PIN_RESET);	//Yellow
 8000d18:	2200      	movs	r2, #0
 8000d1a:	2110      	movs	r1, #16
 8000d1c:	4815      	ldr	r0, [pc, #84]	; (8000d74 <HAL_GPIO_EXTI_Callback+0x7c>)
 8000d1e:	f001 fc5f 	bl	80025e0 <HAL_GPIO_WritePin>
	while (GPIO_Pin == GPIO_PIN_11){
 8000d22:	88fb      	ldrh	r3, [r7, #6]
 8000d24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000d28:	d0ec      	beq.n	8000d04 <HAL_GPIO_EXTI_Callback+0xc>

	/* The second interrupt that I want to do is set the right limit switch interrupt
	 * with a low priority that only gets depressed once.
	 */

	if (GPIO_Pin == GPIO_PIN_13){
 8000d2a:	88fb      	ldrh	r3, [r7, #6]
 8000d2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000d30:	d10a      	bne.n	8000d48 <HAL_GPIO_EXTI_Callback+0x50>
		/* If the right-most limit switch is hit, the motor needs to immediately stop
		 * moving and change to the distances that need to be run in the opposite
		 * direction (change from forward to reverse).
		 */
		stop_Motor();
 8000d32:	f7ff ff71 	bl	8000c18 <stop_Motor>
		adcDistanceCount = 0;
 8000d36:	4b10      	ldr	r3, [pc, #64]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x80>)
 8000d38:	2200      	movs	r2, #0
 8000d3a:	801a      	strh	r2, [r3, #0]
		forward = 0;
 8000d3c:	4b0f      	ldr	r3, [pc, #60]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x84>)
 8000d3e:	2200      	movs	r2, #0
 8000d40:	601a      	str	r2, [r3, #0]
		reverse = 1;
 8000d42:	4b0f      	ldr	r3, [pc, #60]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x88>)
 8000d44:	2201      	movs	r2, #1
 8000d46:	601a      	str	r2, [r3, #0]

	/* The last interrupt that I want to do is set the left limit switch interrupt
	 * with a low priority that only gets depressed once.
	 */

	if (GPIO_Pin == GPIO_PIN_15){
 8000d48:	88fb      	ldrh	r3, [r7, #6]
 8000d4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000d4e:	d10a      	bne.n	8000d66 <HAL_GPIO_EXTI_Callback+0x6e>
		/* If the left-most limit switch is hit, the motor needs to immediately stop
		 * moving and change to the distances that need to be run in the opposite
		 * direction (change from reverse to forward).
		 */
		stop_Motor();
 8000d50:	f7ff ff62 	bl	8000c18 <stop_Motor>
		adcDistanceCount = 0;
 8000d54:	4b08      	ldr	r3, [pc, #32]	; (8000d78 <HAL_GPIO_EXTI_Callback+0x80>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	801a      	strh	r2, [r3, #0]
		reverse = 0;
 8000d5a:	4b09      	ldr	r3, [pc, #36]	; (8000d80 <HAL_GPIO_EXTI_Callback+0x88>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	601a      	str	r2, [r3, #0]
		forward = 1;
 8000d60:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_GPIO_EXTI_Callback+0x84>)
 8000d62:	2201      	movs	r2, #1
 8000d64:	601a      	str	r2, [r3, #0]
	}
}
 8000d66:	bf00      	nop
 8000d68:	3708      	adds	r7, #8
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	40020000 	.word	0x40020000
 8000d74:	40020800 	.word	0x40020800
 8000d78:	20000030 	.word	0x20000030
 8000d7c:	20000000 	.word	0x20000000
 8000d80:	20000038 	.word	0x20000038

08000d84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM13) {
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000d92:	4293      	cmp	r3, r2
 8000d94:	d101      	bne.n	8000d9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000d96:	f000 f9d3 	bl	8001140 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	3708      	adds	r7, #8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40001c00 	.word	0x40001c00

08000da8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000dac:	b672      	cpsid	i
}
 8000dae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000db0:	e7fe      	b.n	8000db0 <Error_Handler+0x8>
	...

08000db4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	b083      	sub	sp, #12
 8000db8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	4b10      	ldr	r3, [pc, #64]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc2:	4a0f      	ldr	r2, [pc, #60]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000dca:	4b0d      	ldr	r3, [pc, #52]	; (8000e00 <HAL_MspInit+0x4c>)
 8000dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	603b      	str	r3, [r7, #0]
 8000dda:	4b09      	ldr	r3, [pc, #36]	; (8000e00 <HAL_MspInit+0x4c>)
 8000ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dde:	4a08      	ldr	r2, [pc, #32]	; (8000e00 <HAL_MspInit+0x4c>)
 8000de0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de4:	6413      	str	r3, [r2, #64]	; 0x40
 8000de6:	4b06      	ldr	r3, [pc, #24]	; (8000e00 <HAL_MspInit+0x4c>)
 8000de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dee:	603b      	str	r3, [r7, #0]
 8000df0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	40023800 	.word	0x40023800

08000e04 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000e04:	b580      	push	{r7, lr}
 8000e06:	b08a      	sub	sp, #40	; 0x28
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	2200      	movs	r2, #0
 8000e12:	601a      	str	r2, [r3, #0]
 8000e14:	605a      	str	r2, [r3, #4]
 8000e16:	609a      	str	r2, [r3, #8]
 8000e18:	60da      	str	r2, [r3, #12]
 8000e1a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC3)
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	681b      	ldr	r3, [r3, #0]
 8000e20:	4a2e      	ldr	r2, [pc, #184]	; (8000edc <HAL_ADC_MspInit+0xd8>)
 8000e22:	4293      	cmp	r3, r2
 8000e24:	d156      	bne.n	8000ed4 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC3_MspInit 0 */

  /* USER CODE END ADC3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000e26:	2300      	movs	r3, #0
 8000e28:	613b      	str	r3, [r7, #16]
 8000e2a:	4b2d      	ldr	r3, [pc, #180]	; (8000ee0 <HAL_ADC_MspInit+0xdc>)
 8000e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e2e:	4a2c      	ldr	r2, [pc, #176]	; (8000ee0 <HAL_ADC_MspInit+0xdc>)
 8000e30:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e34:	6453      	str	r3, [r2, #68]	; 0x44
 8000e36:	4b2a      	ldr	r3, [pc, #168]	; (8000ee0 <HAL_ADC_MspInit+0xdc>)
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e3e:	613b      	str	r3, [r7, #16]
 8000e40:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e42:	2300      	movs	r3, #0
 8000e44:	60fb      	str	r3, [r7, #12]
 8000e46:	4b26      	ldr	r3, [pc, #152]	; (8000ee0 <HAL_ADC_MspInit+0xdc>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	4a25      	ldr	r2, [pc, #148]	; (8000ee0 <HAL_ADC_MspInit+0xdc>)
 8000e4c:	f043 0304 	orr.w	r3, r3, #4
 8000e50:	6313      	str	r3, [r2, #48]	; 0x30
 8000e52:	4b23      	ldr	r3, [pc, #140]	; (8000ee0 <HAL_ADC_MspInit+0xdc>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	f003 0304 	and.w	r3, r3, #4
 8000e5a:	60fb      	str	r3, [r7, #12]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
    /**ADC3 GPIO Configuration
    PC3     ------> ADC3_IN13
    */
    GPIO_InitStruct.Pin = Encoder_Input_Pin;
 8000e5e:	2308      	movs	r3, #8
 8000e60:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e62:	2303      	movs	r3, #3
 8000e64:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Encoder_Input_GPIO_Port, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	481c      	ldr	r0, [pc, #112]	; (8000ee4 <HAL_ADC_MspInit+0xe0>)
 8000e72:	f001 fa09 	bl	8002288 <HAL_GPIO_Init>

    /* ADC3 DMA Init */
    /* ADC3 Init */
    hdma_adc3.Instance = DMA2_Stream0;
 8000e76:	4b1c      	ldr	r3, [pc, #112]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000e78:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <HAL_ADC_MspInit+0xe8>)
 8000e7a:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000e7e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8000e82:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e84:	4b18      	ldr	r3, [pc, #96]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e8a:	4b17      	ldr	r3, [pc, #92]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8000e90:	4b15      	ldr	r3, [pc, #84]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000e92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e96:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000e98:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000e9e:	4b12      	ldr	r3, [pc, #72]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000ea6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000eaa:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_LOW;
 8000eac:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000eb2:	4b0d      	ldr	r3, [pc, #52]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8000eb8:	480b      	ldr	r0, [pc, #44]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000eba:	f000 fe75 	bl	8001ba8 <HAL_DMA_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000ec4:	f7ff ff70 	bl	8000da8 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc3);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	4a07      	ldr	r2, [pc, #28]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000ecc:	639a      	str	r2, [r3, #56]	; 0x38
 8000ece:	4a06      	ldr	r2, [pc, #24]	; (8000ee8 <HAL_ADC_MspInit+0xe4>)
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }

}
 8000ed4:	bf00      	nop
 8000ed6:	3728      	adds	r7, #40	; 0x28
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40012200 	.word	0x40012200
 8000ee0:	40023800 	.word	0x40023800
 8000ee4:	40020800 	.word	0x40020800
 8000ee8:	2000275c 	.word	0x2000275c
 8000eec:	40026410 	.word	0x40026410

08000ef0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f00:	d10d      	bne.n	8000f1e <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60fb      	str	r3, [r7, #12]
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <HAL_TIM_Base_MspInit+0x3c>)
 8000f08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0a:	4a08      	ldr	r2, [pc, #32]	; (8000f2c <HAL_TIM_Base_MspInit+0x3c>)
 8000f0c:	f043 0301 	orr.w	r3, r3, #1
 8000f10:	6413      	str	r3, [r2, #64]	; 0x40
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <HAL_TIM_Base_MspInit+0x3c>)
 8000f14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f16:	f003 0301 	and.w	r3, r3, #1
 8000f1a:	60fb      	str	r3, [r7, #12]
 8000f1c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000f1e:	bf00      	nop
 8000f20:	3714      	adds	r7, #20
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40023800 	.word	0x40023800

08000f30 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b08c      	sub	sp, #48	; 0x30
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM13 IRQ priority */
  HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, TickPriority ,0);
 8000f40:	2200      	movs	r2, #0
 8000f42:	6879      	ldr	r1, [r7, #4]
 8000f44:	202c      	movs	r0, #44	; 0x2c
 8000f46:	f000 fe05 	bl	8001b54 <HAL_NVIC_SetPriority>

  /* Enable the TIM13 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8000f4a:	202c      	movs	r0, #44	; 0x2c
 8000f4c:	f000 fe1e 	bl	8001b8c <HAL_NVIC_EnableIRQ>

  /* Enable TIM13 clock */
  __HAL_RCC_TIM13_CLK_ENABLE();
 8000f50:	2300      	movs	r3, #0
 8000f52:	60fb      	str	r3, [r7, #12]
 8000f54:	4b1f      	ldr	r3, [pc, #124]	; (8000fd4 <HAL_InitTick+0xa4>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f58:	4a1e      	ldr	r2, [pc, #120]	; (8000fd4 <HAL_InitTick+0xa4>)
 8000f5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f5e:	6413      	str	r3, [r2, #64]	; 0x40
 8000f60:	4b1c      	ldr	r3, [pc, #112]	; (8000fd4 <HAL_InitTick+0xa4>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f6c:	f107 0210 	add.w	r2, r7, #16
 8000f70:	f107 0314 	add.w	r3, r7, #20
 8000f74:	4611      	mov	r1, r2
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 ffc4 	bl	8002f04 <HAL_RCC_GetClockConfig>

  /* Compute TIM13 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000f7c:	f001 ffae 	bl	8002edc <HAL_RCC_GetPCLK1Freq>
 8000f80:	4603      	mov	r3, r0
 8000f82:	005b      	lsls	r3, r3, #1
 8000f84:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM13 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f88:	4a13      	ldr	r2, [pc, #76]	; (8000fd8 <HAL_InitTick+0xa8>)
 8000f8a:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8e:	0c9b      	lsrs	r3, r3, #18
 8000f90:	3b01      	subs	r3, #1
 8000f92:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM13 */
  htim13.Instance = TIM13;
 8000f94:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <HAL_InitTick+0xac>)
 8000f96:	4a12      	ldr	r2, [pc, #72]	; (8000fe0 <HAL_InitTick+0xb0>)
 8000f98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM13CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim13.Init.Period = (1000000U / 1000U) - 1U;
 8000f9a:	4b10      	ldr	r3, [pc, #64]	; (8000fdc <HAL_InitTick+0xac>)
 8000f9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fa0:	60da      	str	r2, [r3, #12]
  htim13.Init.Prescaler = uwPrescalerValue;
 8000fa2:	4a0e      	ldr	r2, [pc, #56]	; (8000fdc <HAL_InitTick+0xac>)
 8000fa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000fa6:	6053      	str	r3, [r2, #4]
  htim13.Init.ClockDivision = 0;
 8000fa8:	4b0c      	ldr	r3, [pc, #48]	; (8000fdc <HAL_InitTick+0xac>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	611a      	str	r2, [r3, #16]
  htim13.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fae:	4b0b      	ldr	r3, [pc, #44]	; (8000fdc <HAL_InitTick+0xac>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim13) == HAL_OK)
 8000fb4:	4809      	ldr	r0, [pc, #36]	; (8000fdc <HAL_InitTick+0xac>)
 8000fb6:	f001 ffd7 	bl	8002f68 <HAL_TIM_Base_Init>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d104      	bne.n	8000fca <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim13);
 8000fc0:	4806      	ldr	r0, [pc, #24]	; (8000fdc <HAL_InitTick+0xac>)
 8000fc2:	f002 f821 	bl	8003008 <HAL_TIM_Base_Start_IT>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	e000      	b.n	8000fcc <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3730      	adds	r7, #48	; 0x30
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}
 8000fd4:	40023800 	.word	0x40023800
 8000fd8:	431bde83 	.word	0x431bde83
 8000fdc:	2000284c 	.word	0x2000284c
 8000fe0:	40001c00 	.word	0x40001c00

08000fe4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fe8:	e7fe      	b.n	8000fe8 <NMI_Handler+0x4>

08000fea <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fea:	b480      	push	{r7}
 8000fec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fee:	e7fe      	b.n	8000fee <HardFault_Handler+0x4>

08000ff0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <MemManage_Handler+0x4>

08000ff6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <BusFault_Handler+0x4>

08000ffc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <UsageFault_Handler+0x4>

08001002 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001006:	bf00      	nop
 8001008:	46bd      	mov	sp, r7
 800100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800100e:	4770      	bx	lr

08001010 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800101e:	b480      	push	{r7}
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001022:	bf00      	nop
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr

0800102c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001030:	bf00      	nop
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr

0800103a <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800103a:	b580      	push	{r7, lr}
 800103c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 800103e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001042:	f001 fae7 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001046:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800104a:	f001 fae3 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_15);
 800104e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001052:	f001 fadf 	bl	8002614 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
	...

0800105c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim13);
 8001060:	4802      	ldr	r0, [pc, #8]	; (800106c <TIM8_UP_TIM13_IRQHandler+0x10>)
 8001062:	f002 f841 	bl	80030e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001066:	bf00      	nop
 8001068:	bd80      	pop	{r7, pc}
 800106a:	bf00      	nop
 800106c:	2000284c 	.word	0x2000284c

08001070 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 8001074:	4802      	ldr	r0, [pc, #8]	; (8001080 <DMA2_Stream0_IRQHandler+0x10>)
 8001076:	f000 fe9d 	bl	8001db4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800107a:	bf00      	nop
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	2000275c 	.word	0x2000275c

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	; (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010ac:	480d      	ldr	r0, [pc, #52]	; (80010e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80010ae:	490e      	ldr	r1, [pc, #56]	; (80010e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80010b0:	4a0e      	ldr	r2, [pc, #56]	; (80010ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80010b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b4:	e002      	b.n	80010bc <LoopCopyDataInit>

080010b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010ba:	3304      	adds	r3, #4

080010bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c0:	d3f9      	bcc.n	80010b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c2:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80010c4:	4c0b      	ldr	r4, [pc, #44]	; (80010f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80010c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010c8:	e001      	b.n	80010ce <LoopFillZerobss>

080010ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010cc:	3204      	adds	r2, #4

080010ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d0:	d3fb      	bcc.n	80010ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80010d2:	f7ff ffd7 	bl	8001084 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80010d6:	f002 fbc9 	bl	800386c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff fa03 	bl	80004e4 <main>
  bx  lr    
 80010de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80010e0:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 80010ec:	0800390c 	.word	0x0800390c
  ldr r2, =_sbss
 80010f0:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 80010f4:	20002898 	.word	0x20002898

080010f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	; (800113c <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	; (800113c <HAL_Init+0x40>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800110a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	; (800113c <HAL_Init+0x40>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	; (800113c <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	; (800113c <HAL_Init+0x40>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 fd0a 	bl	8001b3e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	200f      	movs	r0, #15
 800112c:	f7ff ff00 	bl	8000f30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fe40 	bl	8000db4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_IncTick+0x20>)
 8001146:	781b      	ldrb	r3, [r3, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b06      	ldr	r3, [pc, #24]	; (8001164 <HAL_IncTick+0x24>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	4413      	add	r3, r2
 8001150:	4a04      	ldr	r2, [pc, #16]	; (8001164 <HAL_IncTick+0x24>)
 8001152:	6013      	str	r3, [r2, #0]
}
 8001154:	bf00      	nop
 8001156:	46bd      	mov	sp, r7
 8001158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115c:	4770      	bx	lr
 800115e:	bf00      	nop
 8001160:	20000010 	.word	0x20000010
 8001164:	20002894 	.word	0x20002894

08001168 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001168:	b480      	push	{r7}
 800116a:	af00      	add	r7, sp, #0
  return uwTick;
 800116c:	4b03      	ldr	r3, [pc, #12]	; (800117c <HAL_GetTick+0x14>)
 800116e:	681b      	ldr	r3, [r3, #0]
}
 8001170:	4618      	mov	r0, r3
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	20002894 	.word	0x20002894

08001180 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b084      	sub	sp, #16
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001188:	f7ff ffee 	bl	8001168 <HAL_GetTick>
 800118c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001198:	d005      	beq.n	80011a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800119a:	4b0a      	ldr	r3, [pc, #40]	; (80011c4 <HAL_Delay+0x44>)
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	461a      	mov	r2, r3
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	4413      	add	r3, r2
 80011a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80011a6:	bf00      	nop
 80011a8:	f7ff ffde 	bl	8001168 <HAL_GetTick>
 80011ac:	4602      	mov	r2, r0
 80011ae:	68bb      	ldr	r3, [r7, #8]
 80011b0:	1ad3      	subs	r3, r2, r3
 80011b2:	68fa      	ldr	r2, [r7, #12]
 80011b4:	429a      	cmp	r2, r3
 80011b6:	d8f7      	bhi.n	80011a8 <HAL_Delay+0x28>
  {
  }
}
 80011b8:	bf00      	nop
 80011ba:	bf00      	nop
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	20000010 	.word	0x20000010

080011c8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b084      	sub	sp, #16
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011d0:	2300      	movs	r3, #0
 80011d2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d101      	bne.n	80011de <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e033      	b.n	8001246 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d109      	bne.n	80011fa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff fe0c 	bl	8000e04 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	2200      	movs	r2, #0
 80011f0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fe:	f003 0310 	and.w	r3, r3, #16
 8001202:	2b00      	cmp	r3, #0
 8001204:	d118      	bne.n	8001238 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800120e:	f023 0302 	bic.w	r3, r3, #2
 8001212:	f043 0202 	orr.w	r2, r3, #2
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f000 fa64 	bl	80016e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122a:	f023 0303 	bic.w	r3, r3, #3
 800122e:	f043 0201 	orr.w	r2, r3, #1
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	641a      	str	r2, [r3, #64]	; 0x40
 8001236:	e001      	b.n	800123c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001238:	2301      	movs	r3, #1
 800123a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2200      	movs	r2, #0
 8001240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001244:	7bfb      	ldrb	r3, [r7, #15]
}
 8001246:	4618      	mov	r0, r3
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	60f8      	str	r0, [r7, #12]
 8001258:	60b9      	str	r1, [r7, #8]
 800125a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001266:	2b01      	cmp	r3, #1
 8001268:	d101      	bne.n	800126e <HAL_ADC_Start_DMA+0x1e>
 800126a:	2302      	movs	r3, #2
 800126c:	e0e9      	b.n	8001442 <HAL_ADC_Start_DMA+0x1f2>
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	2201      	movs	r2, #1
 8001272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	689b      	ldr	r3, [r3, #8]
 800127c:	f003 0301 	and.w	r3, r3, #1
 8001280:	2b01      	cmp	r3, #1
 8001282:	d018      	beq.n	80012b6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	689a      	ldr	r2, [r3, #8]
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f042 0201 	orr.w	r2, r2, #1
 8001292:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001294:	4b6d      	ldr	r3, [pc, #436]	; (800144c <HAL_ADC_Start_DMA+0x1fc>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	4a6d      	ldr	r2, [pc, #436]	; (8001450 <HAL_ADC_Start_DMA+0x200>)
 800129a:	fba2 2303 	umull	r2, r3, r2, r3
 800129e:	0c9a      	lsrs	r2, r3, #18
 80012a0:	4613      	mov	r3, r2
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	4413      	add	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012a8:	e002      	b.n	80012b0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	3b01      	subs	r3, #1
 80012ae:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d1f9      	bne.n	80012aa <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80012b6:	68fb      	ldr	r3, [r7, #12]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012c4:	d107      	bne.n	80012d6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	689a      	ldr	r2, [r3, #8]
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80012d4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	f040 80a1 	bne.w	8001428 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012ea:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80012ee:	f023 0301 	bic.w	r3, r3, #1
 80012f2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80012fa:	68fb      	ldr	r3, [r7, #12]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	685b      	ldr	r3, [r3, #4]
 8001300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001304:	2b00      	cmp	r3, #0
 8001306:	d007      	beq.n	8001318 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800130c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001310:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001320:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001324:	d106      	bne.n	8001334 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132a:	f023 0206 	bic.w	r2, r3, #6
 800132e:	68fb      	ldr	r3, [r7, #12]
 8001330:	645a      	str	r2, [r3, #68]	; 0x44
 8001332:	e002      	b.n	800133a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	2200      	movs	r2, #0
 8001338:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	2200      	movs	r2, #0
 800133e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001342:	4b44      	ldr	r3, [pc, #272]	; (8001454 <HAL_ADC_Start_DMA+0x204>)
 8001344:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800134a:	4a43      	ldr	r2, [pc, #268]	; (8001458 <HAL_ADC_Start_DMA+0x208>)
 800134c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001352:	4a42      	ldr	r2, [pc, #264]	; (800145c <HAL_ADC_Start_DMA+0x20c>)
 8001354:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135a:	4a41      	ldr	r2, [pc, #260]	; (8001460 <HAL_ADC_Start_DMA+0x210>)
 800135c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001366:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	685a      	ldr	r2, [r3, #4]
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001376:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001378:	68fb      	ldr	r3, [r7, #12]
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	689a      	ldr	r2, [r3, #8]
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001386:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	334c      	adds	r3, #76	; 0x4c
 8001392:	4619      	mov	r1, r3
 8001394:	68ba      	ldr	r2, [r7, #8]
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	f000 fcb4 	bl	8001d04 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	685b      	ldr	r3, [r3, #4]
 80013a0:	f003 031f 	and.w	r3, r3, #31
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d12a      	bne.n	80013fe <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	4a2d      	ldr	r2, [pc, #180]	; (8001464 <HAL_ADC_Start_DMA+0x214>)
 80013ae:	4293      	cmp	r3, r2
 80013b0:	d015      	beq.n	80013de <HAL_ADC_Start_DMA+0x18e>
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a2c      	ldr	r2, [pc, #176]	; (8001468 <HAL_ADC_Start_DMA+0x218>)
 80013b8:	4293      	cmp	r3, r2
 80013ba:	d105      	bne.n	80013c8 <HAL_ADC_Start_DMA+0x178>
 80013bc:	4b25      	ldr	r3, [pc, #148]	; (8001454 <HAL_ADC_Start_DMA+0x204>)
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f003 031f 	and.w	r3, r3, #31
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d00a      	beq.n	80013de <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80013c8:	68fb      	ldr	r3, [r7, #12]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a27      	ldr	r2, [pc, #156]	; (800146c <HAL_ADC_Start_DMA+0x21c>)
 80013ce:	4293      	cmp	r3, r2
 80013d0:	d136      	bne.n	8001440 <HAL_ADC_Start_DMA+0x1f0>
 80013d2:	4b20      	ldr	r3, [pc, #128]	; (8001454 <HAL_ADC_Start_DMA+0x204>)
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	f003 0310 	and.w	r3, r3, #16
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d130      	bne.n	8001440 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	689b      	ldr	r3, [r3, #8]
 80013e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d129      	bne.n	8001440 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	689a      	ldr	r2, [r3, #8]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80013fa:	609a      	str	r2, [r3, #8]
 80013fc:	e020      	b.n	8001440 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a18      	ldr	r2, [pc, #96]	; (8001464 <HAL_ADC_Start_DMA+0x214>)
 8001404:	4293      	cmp	r3, r2
 8001406:	d11b      	bne.n	8001440 <HAL_ADC_Start_DMA+0x1f0>
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	689b      	ldr	r3, [r3, #8]
 800140e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d114      	bne.n	8001440 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	689a      	ldr	r2, [r3, #8]
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001424:	609a      	str	r2, [r3, #8]
 8001426:	e00b      	b.n	8001440 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800142c:	f043 0210 	orr.w	r2, r3, #16
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001438:	f043 0201 	orr.w	r2, r3, #1
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001440:	2300      	movs	r3, #0
}
 8001442:	4618      	mov	r0, r3
 8001444:	3718      	adds	r7, #24
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000008 	.word	0x20000008
 8001450:	431bde83 	.word	0x431bde83
 8001454:	40012300 	.word	0x40012300
 8001458:	080018e1 	.word	0x080018e1
 800145c:	0800199b 	.word	0x0800199b
 8001460:	080019b7 	.word	0x080019b7
 8001464:	40012000 	.word	0x40012000
 8001468:	40012100 	.word	0x40012100
 800146c:	40012200 	.word	0x40012200

08001470 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001478:	bf00      	nop
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001482:	4770      	bx	lr

08001484 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
 800148c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001498:	2b01      	cmp	r3, #1
 800149a:	d101      	bne.n	80014a0 <HAL_ADC_ConfigChannel+0x1c>
 800149c:	2302      	movs	r3, #2
 800149e:	e113      	b.n	80016c8 <HAL_ADC_ConfigChannel+0x244>
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2201      	movs	r2, #1
 80014a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b09      	cmp	r3, #9
 80014ae:	d925      	bls.n	80014fc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	68d9      	ldr	r1, [r3, #12]
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	b29b      	uxth	r3, r3
 80014bc:	461a      	mov	r2, r3
 80014be:	4613      	mov	r3, r2
 80014c0:	005b      	lsls	r3, r3, #1
 80014c2:	4413      	add	r3, r2
 80014c4:	3b1e      	subs	r3, #30
 80014c6:	2207      	movs	r2, #7
 80014c8:	fa02 f303 	lsl.w	r3, r2, r3
 80014cc:	43da      	mvns	r2, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	400a      	ands	r2, r1
 80014d4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	68d9      	ldr	r1, [r3, #12]
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	689a      	ldr	r2, [r3, #8]
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	b29b      	uxth	r3, r3
 80014e6:	4618      	mov	r0, r3
 80014e8:	4603      	mov	r3, r0
 80014ea:	005b      	lsls	r3, r3, #1
 80014ec:	4403      	add	r3, r0
 80014ee:	3b1e      	subs	r3, #30
 80014f0:	409a      	lsls	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	430a      	orrs	r2, r1
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	e022      	b.n	8001542 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	6919      	ldr	r1, [r3, #16]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	b29b      	uxth	r3, r3
 8001508:	461a      	mov	r2, r3
 800150a:	4613      	mov	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	4413      	add	r3, r2
 8001510:	2207      	movs	r2, #7
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	400a      	ands	r2, r1
 800151e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6919      	ldr	r1, [r3, #16]
 8001526:	683b      	ldr	r3, [r7, #0]
 8001528:	689a      	ldr	r2, [r3, #8]
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	b29b      	uxth	r3, r3
 8001530:	4618      	mov	r0, r3
 8001532:	4603      	mov	r3, r0
 8001534:	005b      	lsls	r3, r3, #1
 8001536:	4403      	add	r3, r0
 8001538:	409a      	lsls	r2, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2b06      	cmp	r3, #6
 8001548:	d824      	bhi.n	8001594 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	685a      	ldr	r2, [r3, #4]
 8001554:	4613      	mov	r3, r2
 8001556:	009b      	lsls	r3, r3, #2
 8001558:	4413      	add	r3, r2
 800155a:	3b05      	subs	r3, #5
 800155c:	221f      	movs	r2, #31
 800155e:	fa02 f303 	lsl.w	r3, r2, r3
 8001562:	43da      	mvns	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	400a      	ands	r2, r1
 800156a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	b29b      	uxth	r3, r3
 8001578:	4618      	mov	r0, r3
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	4613      	mov	r3, r2
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	4413      	add	r3, r2
 8001584:	3b05      	subs	r3, #5
 8001586:	fa00 f203 	lsl.w	r2, r0, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	430a      	orrs	r2, r1
 8001590:	635a      	str	r2, [r3, #52]	; 0x34
 8001592:	e04c      	b.n	800162e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b0c      	cmp	r3, #12
 800159a:	d824      	bhi.n	80015e6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	4613      	mov	r3, r2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	4413      	add	r3, r2
 80015ac:	3b23      	subs	r3, #35	; 0x23
 80015ae:	221f      	movs	r2, #31
 80015b0:	fa02 f303 	lsl.w	r3, r2, r3
 80015b4:	43da      	mvns	r2, r3
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	400a      	ands	r2, r1
 80015bc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	4618      	mov	r0, r3
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685a      	ldr	r2, [r3, #4]
 80015d0:	4613      	mov	r3, r2
 80015d2:	009b      	lsls	r3, r3, #2
 80015d4:	4413      	add	r3, r2
 80015d6:	3b23      	subs	r3, #35	; 0x23
 80015d8:	fa00 f203 	lsl.w	r2, r0, r3
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	430a      	orrs	r2, r1
 80015e2:	631a      	str	r2, [r3, #48]	; 0x30
 80015e4:	e023      	b.n	800162e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	685a      	ldr	r2, [r3, #4]
 80015f0:	4613      	mov	r3, r2
 80015f2:	009b      	lsls	r3, r3, #2
 80015f4:	4413      	add	r3, r2
 80015f6:	3b41      	subs	r3, #65	; 0x41
 80015f8:	221f      	movs	r2, #31
 80015fa:	fa02 f303 	lsl.w	r3, r2, r3
 80015fe:	43da      	mvns	r2, r3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	400a      	ands	r2, r1
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800160e:	683b      	ldr	r3, [r7, #0]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	4618      	mov	r0, r3
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	685a      	ldr	r2, [r3, #4]
 800161a:	4613      	mov	r3, r2
 800161c:	009b      	lsls	r3, r3, #2
 800161e:	4413      	add	r3, r2
 8001620:	3b41      	subs	r3, #65	; 0x41
 8001622:	fa00 f203 	lsl.w	r2, r0, r3
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	430a      	orrs	r2, r1
 800162c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800162e:	4b29      	ldr	r3, [pc, #164]	; (80016d4 <HAL_ADC_ConfigChannel+0x250>)
 8001630:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a28      	ldr	r2, [pc, #160]	; (80016d8 <HAL_ADC_ConfigChannel+0x254>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d10f      	bne.n	800165c <HAL_ADC_ConfigChannel+0x1d8>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b12      	cmp	r3, #18
 8001642:	d10b      	bne.n	800165c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a1d      	ldr	r2, [pc, #116]	; (80016d8 <HAL_ADC_ConfigChannel+0x254>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d12b      	bne.n	80016be <HAL_ADC_ConfigChannel+0x23a>
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a1c      	ldr	r2, [pc, #112]	; (80016dc <HAL_ADC_ConfigChannel+0x258>)
 800166c:	4293      	cmp	r3, r2
 800166e:	d003      	beq.n	8001678 <HAL_ADC_ConfigChannel+0x1f4>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	2b11      	cmp	r3, #17
 8001676:	d122      	bne.n	80016be <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001690:	683b      	ldr	r3, [r7, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a11      	ldr	r2, [pc, #68]	; (80016dc <HAL_ADC_ConfigChannel+0x258>)
 8001696:	4293      	cmp	r3, r2
 8001698:	d111      	bne.n	80016be <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800169a:	4b11      	ldr	r3, [pc, #68]	; (80016e0 <HAL_ADC_ConfigChannel+0x25c>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a11      	ldr	r2, [pc, #68]	; (80016e4 <HAL_ADC_ConfigChannel+0x260>)
 80016a0:	fba2 2303 	umull	r2, r3, r2, r3
 80016a4:	0c9a      	lsrs	r2, r3, #18
 80016a6:	4613      	mov	r3, r2
 80016a8:	009b      	lsls	r3, r3, #2
 80016aa:	4413      	add	r3, r2
 80016ac:	005b      	lsls	r3, r3, #1
 80016ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016b0:	e002      	b.n	80016b8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1f9      	bne.n	80016b2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	2200      	movs	r2, #0
 80016c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80016c6:	2300      	movs	r3, #0
}
 80016c8:	4618      	mov	r0, r3
 80016ca:	3714      	adds	r7, #20
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr
 80016d4:	40012300 	.word	0x40012300
 80016d8:	40012000 	.word	0x40012000
 80016dc:	10000012 	.word	0x10000012
 80016e0:	20000008 	.word	0x20000008
 80016e4:	431bde83 	.word	0x431bde83

080016e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016e8:	b480      	push	{r7}
 80016ea:	b085      	sub	sp, #20
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80016f0:	4b79      	ldr	r3, [pc, #484]	; (80018d8 <ADC_Init+0x1f0>)
 80016f2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	431a      	orrs	r2, r3
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	685a      	ldr	r2, [r3, #4]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800171c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	6859      	ldr	r1, [r3, #4]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	691b      	ldr	r3, [r3, #16]
 8001728:	021a      	lsls	r2, r3, #8
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	685a      	ldr	r2, [r3, #4]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001740:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6859      	ldr	r1, [r3, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	689a      	ldr	r2, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	430a      	orrs	r2, r1
 8001752:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	689a      	ldr	r2, [r3, #8]
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001762:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6899      	ldr	r1, [r3, #8]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177a:	4a58      	ldr	r2, [pc, #352]	; (80018dc <ADC_Init+0x1f4>)
 800177c:	4293      	cmp	r3, r2
 800177e:	d022      	beq.n	80017c6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	689a      	ldr	r2, [r3, #8]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800178e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	6899      	ldr	r1, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	430a      	orrs	r2, r1
 80017a0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	689a      	ldr	r2, [r3, #8]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017b0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	6899      	ldr	r1, [r3, #8]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	430a      	orrs	r2, r1
 80017c2:	609a      	str	r2, [r3, #8]
 80017c4:	e00f      	b.n	80017e6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	689a      	ldr	r2, [r3, #8]
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80017d4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	689a      	ldr	r2, [r3, #8]
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80017e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	689a      	ldr	r2, [r3, #8]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f022 0202 	bic.w	r2, r2, #2
 80017f4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	6899      	ldr	r1, [r3, #8]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	7e1b      	ldrb	r3, [r3, #24]
 8001800:	005a      	lsls	r2, r3, #1
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	430a      	orrs	r2, r1
 8001808:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d01b      	beq.n	800184c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001822:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	685a      	ldr	r2, [r3, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001832:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	6859      	ldr	r1, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183e:	3b01      	subs	r3, #1
 8001840:	035a      	lsls	r2, r3, #13
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	430a      	orrs	r2, r1
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	e007      	b.n	800185c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	685a      	ldr	r2, [r3, #4]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800185a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800186a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	69db      	ldr	r3, [r3, #28]
 8001876:	3b01      	subs	r3, #1
 8001878:	051a      	lsls	r2, r3, #20
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	430a      	orrs	r2, r1
 8001880:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	689a      	ldr	r2, [r3, #8]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001890:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	6899      	ldr	r1, [r3, #8]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800189e:	025a      	lsls	r2, r3, #9
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	430a      	orrs	r2, r1
 80018a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	689a      	ldr	r2, [r3, #8]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80018b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6899      	ldr	r1, [r3, #8]
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	695b      	ldr	r3, [r3, #20]
 80018c2:	029a      	lsls	r2, r3, #10
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	430a      	orrs	r2, r1
 80018ca:	609a      	str	r2, [r3, #8]
}
 80018cc:	bf00      	nop
 80018ce:	3714      	adds	r7, #20
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40012300 	.word	0x40012300
 80018dc:	0f000001 	.word	0x0f000001

080018e0 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b084      	sub	sp, #16
 80018e4:	af00      	add	r7, sp, #0
 80018e6:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ec:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018f2:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d13c      	bne.n	8001974 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018fe:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001902:	68fb      	ldr	r3, [r7, #12]
 8001904:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	689b      	ldr	r3, [r3, #8]
 800190c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d12b      	bne.n	800196c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001918:	2b00      	cmp	r3, #0
 800191a:	d127      	bne.n	800196c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001922:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001926:	2b00      	cmp	r3, #0
 8001928:	d006      	beq.n	8001938 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001934:	2b00      	cmp	r3, #0
 8001936:	d119      	bne.n	800196c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	685a      	ldr	r2, [r3, #4]
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0220 	bic.w	r2, r2, #32
 8001946:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800194c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001958:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800195c:	2b00      	cmp	r3, #0
 800195e:	d105      	bne.n	800196c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001964:	f043 0201 	orr.w	r2, r3, #1
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800196c:	68f8      	ldr	r0, [r7, #12]
 800196e:	f7ff f809 	bl	8000984 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001972:	e00e      	b.n	8001992 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001978:	f003 0310 	and.w	r3, r3, #16
 800197c:	2b00      	cmp	r3, #0
 800197e:	d003      	beq.n	8001988 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001980:	68f8      	ldr	r0, [r7, #12]
 8001982:	f7ff fd75 	bl	8001470 <HAL_ADC_ErrorCallback>
}
 8001986:	e004      	b.n	8001992 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800198c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	4798      	blx	r3
}
 8001992:	bf00      	nop
 8001994:	3710      	adds	r7, #16
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}

0800199a <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800199a:	b580      	push	{r7, lr}
 800199c:	b084      	sub	sp, #16
 800199e:	af00      	add	r7, sp, #0
 80019a0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019a6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80019a8:	68f8      	ldr	r0, [r7, #12]
 80019aa:	f7fe ffdb 	bl	8000964 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}

080019b6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80019b6:	b580      	push	{r7, lr}
 80019b8:	b084      	sub	sp, #16
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	2240      	movs	r2, #64	; 0x40
 80019c8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ce:	f043 0204 	orr.w	r2, r3, #4
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fd4a 	bl	8001470 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}

080019e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b480      	push	{r7}
 80019e6:	b085      	sub	sp, #20
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	f003 0307 	and.w	r3, r3, #7
 80019f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 80019f6:	68db      	ldr	r3, [r3, #12]
 80019f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fa:	68ba      	ldr	r2, [r7, #8]
 80019fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a00:	4013      	ands	r3, r2
 8001a02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a16:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <__NVIC_SetPriorityGrouping+0x44>)
 8001a18:	68bb      	ldr	r3, [r7, #8]
 8001a1a:	60d3      	str	r3, [r2, #12]
}
 8001a1c:	bf00      	nop
 8001a1e:	3714      	adds	r7, #20
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	e000ed00 	.word	0xe000ed00

08001a2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a30:	4b04      	ldr	r3, [pc, #16]	; (8001a44 <__NVIC_GetPriorityGrouping+0x18>)
 8001a32:	68db      	ldr	r3, [r3, #12]
 8001a34:	0a1b      	lsrs	r3, r3, #8
 8001a36:	f003 0307 	and.w	r3, r3, #7
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	e000ed00 	.word	0xe000ed00

08001a48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	4603      	mov	r3, r0
 8001a50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	db0b      	blt.n	8001a72 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5a:	79fb      	ldrb	r3, [r7, #7]
 8001a5c:	f003 021f 	and.w	r2, r3, #31
 8001a60:	4907      	ldr	r1, [pc, #28]	; (8001a80 <__NVIC_EnableIRQ+0x38>)
 8001a62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a66:	095b      	lsrs	r3, r3, #5
 8001a68:	2001      	movs	r0, #1
 8001a6a:	fa00 f202 	lsl.w	r2, r0, r2
 8001a6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a72:	bf00      	nop
 8001a74:	370c      	adds	r7, #12
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
 8001a7e:	bf00      	nop
 8001a80:	e000e100 	.word	0xe000e100

08001a84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b083      	sub	sp, #12
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	6039      	str	r1, [r7, #0]
 8001a8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	db0a      	blt.n	8001aae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	b2da      	uxtb	r2, r3
 8001a9c:	490c      	ldr	r1, [pc, #48]	; (8001ad0 <__NVIC_SetPriority+0x4c>)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	0112      	lsls	r2, r2, #4
 8001aa4:	b2d2      	uxtb	r2, r2
 8001aa6:	440b      	add	r3, r1
 8001aa8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001aac:	e00a      	b.n	8001ac4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	b2da      	uxtb	r2, r3
 8001ab2:	4908      	ldr	r1, [pc, #32]	; (8001ad4 <__NVIC_SetPriority+0x50>)
 8001ab4:	79fb      	ldrb	r3, [r7, #7]
 8001ab6:	f003 030f 	and.w	r3, r3, #15
 8001aba:	3b04      	subs	r3, #4
 8001abc:	0112      	lsls	r2, r2, #4
 8001abe:	b2d2      	uxtb	r2, r2
 8001ac0:	440b      	add	r3, r1
 8001ac2:	761a      	strb	r2, [r3, #24]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	e000e100 	.word	0xe000e100
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b089      	sub	sp, #36	; 0x24
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	60f8      	str	r0, [r7, #12]
 8001ae0:	60b9      	str	r1, [r7, #8]
 8001ae2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	f003 0307 	and.w	r3, r3, #7
 8001aea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	f1c3 0307 	rsb	r3, r3, #7
 8001af2:	2b04      	cmp	r3, #4
 8001af4:	bf28      	it	cs
 8001af6:	2304      	movcs	r3, #4
 8001af8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	3304      	adds	r3, #4
 8001afe:	2b06      	cmp	r3, #6
 8001b00:	d902      	bls.n	8001b08 <NVIC_EncodePriority+0x30>
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	3b03      	subs	r3, #3
 8001b06:	e000      	b.n	8001b0a <NVIC_EncodePriority+0x32>
 8001b08:	2300      	movs	r3, #0
 8001b0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b0c:	f04f 32ff 	mov.w	r2, #4294967295
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43da      	mvns	r2, r3
 8001b18:	68bb      	ldr	r3, [r7, #8]
 8001b1a:	401a      	ands	r2, r3
 8001b1c:	697b      	ldr	r3, [r7, #20]
 8001b1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b20:	f04f 31ff 	mov.w	r1, #4294967295
 8001b24:	697b      	ldr	r3, [r7, #20]
 8001b26:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2a:	43d9      	mvns	r1, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b30:	4313      	orrs	r3, r2
         );
}
 8001b32:	4618      	mov	r0, r3
 8001b34:	3724      	adds	r7, #36	; 0x24
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b3e:	b580      	push	{r7, lr}
 8001b40:	b082      	sub	sp, #8
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b46:	6878      	ldr	r0, [r7, #4]
 8001b48:	f7ff ff4c 	bl	80019e4 <__NVIC_SetPriorityGrouping>
}
 8001b4c:	bf00      	nop
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b086      	sub	sp, #24
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	60b9      	str	r1, [r7, #8]
 8001b5e:	607a      	str	r2, [r7, #4]
 8001b60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b62:	2300      	movs	r3, #0
 8001b64:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b66:	f7ff ff61 	bl	8001a2c <__NVIC_GetPriorityGrouping>
 8001b6a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b6c:	687a      	ldr	r2, [r7, #4]
 8001b6e:	68b9      	ldr	r1, [r7, #8]
 8001b70:	6978      	ldr	r0, [r7, #20]
 8001b72:	f7ff ffb1 	bl	8001ad8 <NVIC_EncodePriority>
 8001b76:	4602      	mov	r2, r0
 8001b78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b7c:	4611      	mov	r1, r2
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7ff ff80 	bl	8001a84 <__NVIC_SetPriority>
}
 8001b84:	bf00      	nop
 8001b86:	3718      	adds	r7, #24
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	bd80      	pop	{r7, pc}

08001b8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	4603      	mov	r3, r0
 8001b94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	f7ff ff54 	bl	8001a48 <__NVIC_EnableIRQ>
}
 8001ba0:	bf00      	nop
 8001ba2:	3708      	adds	r7, #8
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}

08001ba8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001bb4:	f7ff fad8 	bl	8001168 <HAL_GetTick>
 8001bb8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e099      	b.n	8001cf8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	2202      	movs	r2, #2
 8001bc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2200      	movs	r2, #0
 8001bd0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	681a      	ldr	r2, [r3, #0]
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f022 0201 	bic.w	r2, r2, #1
 8001be2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001be4:	e00f      	b.n	8001c06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001be6:	f7ff fabf 	bl	8001168 <HAL_GetTick>
 8001bea:	4602      	mov	r2, r0
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	1ad3      	subs	r3, r2, r3
 8001bf0:	2b05      	cmp	r3, #5
 8001bf2:	d908      	bls.n	8001c06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2203      	movs	r2, #3
 8001bfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c02:	2303      	movs	r3, #3
 8001c04:	e078      	b.n	8001cf8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0301 	and.w	r3, r3, #1
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1e8      	bne.n	8001be6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	4b38      	ldr	r3, [pc, #224]	; (8001d00 <HAL_DMA_Init+0x158>)
 8001c20:	4013      	ands	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	685a      	ldr	r2, [r3, #4]
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	691b      	ldr	r3, [r3, #16]
 8001c38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6a1b      	ldr	r3, [r3, #32]
 8001c50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	d107      	bne.n	8001c70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	697a      	ldr	r2, [r7, #20]
 8001c76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f023 0307 	bic.w	r3, r3, #7
 8001c86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c8c:	697a      	ldr	r2, [r7, #20]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d117      	bne.n	8001cca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	4313      	orrs	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d00e      	beq.n	8001cca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001cac:	6878      	ldr	r0, [r7, #4]
 8001cae:	f000 fa6f 	bl	8002190 <DMA_CheckFifoParam>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d008      	beq.n	8001cca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	2240      	movs	r2, #64	; 0x40
 8001cbc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	2201      	movs	r2, #1
 8001cc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	e016      	b.n	8001cf8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f000 fa26 	bl	8002124 <DMA_CalcBaseAndBitshift>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ce0:	223f      	movs	r2, #63	; 0x3f
 8001ce2:	409a      	lsls	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2200      	movs	r2, #0
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2201      	movs	r2, #1
 8001cf2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001cf6:	2300      	movs	r3, #0
}
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	3718      	adds	r7, #24
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}
 8001d00:	f010803f 	.word	0xf010803f

08001d04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	b086      	sub	sp, #24
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d12:	2300      	movs	r3, #0
 8001d14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d101      	bne.n	8001d2a <HAL_DMA_Start_IT+0x26>
 8001d26:	2302      	movs	r3, #2
 8001d28:	e040      	b.n	8001dac <HAL_DMA_Start_IT+0xa8>
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	2b01      	cmp	r3, #1
 8001d3c:	d12f      	bne.n	8001d9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	2202      	movs	r2, #2
 8001d42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	2200      	movs	r2, #0
 8001d4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	68b9      	ldr	r1, [r7, #8]
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	f000 f9b8 	bl	80020c8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d5c:	223f      	movs	r2, #63	; 0x3f
 8001d5e:	409a      	lsls	r2, r3
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f042 0216 	orr.w	r2, r2, #22
 8001d72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d007      	beq.n	8001d8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0208 	orr.w	r2, r2, #8
 8001d8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	681a      	ldr	r2, [r3, #0]
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f042 0201 	orr.w	r2, r2, #1
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	e005      	b.n	8001daa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2200      	movs	r2, #0
 8001da2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001da6:	2302      	movs	r3, #2
 8001da8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001daa:	7dfb      	ldrb	r3, [r7, #23]
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3718      	adds	r7, #24
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b086      	sub	sp, #24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001dc0:	4b92      	ldr	r3, [pc, #584]	; (800200c <HAL_DMA_IRQHandler+0x258>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a92      	ldr	r2, [pc, #584]	; (8002010 <HAL_DMA_IRQHandler+0x25c>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0a9b      	lsrs	r3, r3, #10
 8001dcc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dde:	2208      	movs	r2, #8
 8001de0:	409a      	lsls	r2, r3
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	4013      	ands	r3, r2
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d01a      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d013      	beq.n	8001e20 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	681a      	ldr	r2, [r3, #0]
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f022 0204 	bic.w	r2, r2, #4
 8001e06:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	409a      	lsls	r2, r3
 8001e10:	693b      	ldr	r3, [r7, #16]
 8001e12:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e18:	f043 0201 	orr.w	r2, r3, #1
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e24:	2201      	movs	r2, #1
 8001e26:	409a      	lsls	r2, r3
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d012      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	695b      	ldr	r3, [r3, #20]
 8001e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d00b      	beq.n	8001e56 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	2201      	movs	r2, #1
 8001e44:	409a      	lsls	r2, r3
 8001e46:	693b      	ldr	r3, [r7, #16]
 8001e48:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e4e:	f043 0202 	orr.w	r2, r3, #2
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	409a      	lsls	r2, r3
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d012      	beq.n	8001e8c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 0302 	and.w	r3, r3, #2
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d00b      	beq.n	8001e8c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e78:	2204      	movs	r2, #4
 8001e7a:	409a      	lsls	r2, r3
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e84:	f043 0204 	orr.w	r2, r3, #4
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e90:	2210      	movs	r2, #16
 8001e92:	409a      	lsls	r2, r3
 8001e94:	68fb      	ldr	r3, [r7, #12]
 8001e96:	4013      	ands	r3, r2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d043      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d03c      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eae:	2210      	movs	r2, #16
 8001eb0:	409a      	lsls	r2, r3
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d018      	beq.n	8001ef6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d108      	bne.n	8001ee4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d024      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	4798      	blx	r3
 8001ee2:	e01f      	b.n	8001f24 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d01b      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ef0:	6878      	ldr	r0, [r7, #4]
 8001ef2:	4798      	blx	r3
 8001ef4:	e016      	b.n	8001f24 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d107      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	681a      	ldr	r2, [r3, #0]
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f022 0208 	bic.w	r2, r2, #8
 8001f12:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d003      	beq.n	8001f24 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f28:	2220      	movs	r2, #32
 8001f2a:	409a      	lsls	r2, r3
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	f000 808e 	beq.w	8002052 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0310 	and.w	r3, r3, #16
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	f000 8086 	beq.w	8002052 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	2220      	movs	r2, #32
 8001f4c:	409a      	lsls	r2, r3
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	d136      	bne.n	8001fcc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f022 0216 	bic.w	r2, r2, #22
 8001f6c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	695a      	ldr	r2, [r3, #20]
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f7c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d103      	bne.n	8001f8e <HAL_DMA_IRQHandler+0x1da>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d007      	beq.n	8001f9e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f022 0208 	bic.w	r2, r2, #8
 8001f9c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa2:	223f      	movs	r2, #63	; 0x3f
 8001fa4:	409a      	lsls	r2, r3
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	2201      	movs	r2, #1
 8001fae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d07d      	beq.n	80020be <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	4798      	blx	r3
        }
        return;
 8001fca:	e078      	b.n	80020be <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d01c      	beq.n	8002014 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d108      	bne.n	8001ffa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d030      	beq.n	8002052 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	4798      	blx	r3
 8001ff8:	e02b      	b.n	8002052 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d027      	beq.n	8002052 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	4798      	blx	r3
 800200a:	e022      	b.n	8002052 <HAL_DMA_IRQHandler+0x29e>
 800200c:	20000008 	.word	0x20000008
 8002010:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800201e:	2b00      	cmp	r3, #0
 8002020:	d10f      	bne.n	8002042 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f022 0210 	bic.w	r2, r2, #16
 8002030:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2201      	movs	r2, #1
 8002036:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2200      	movs	r2, #0
 800203e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002046:	2b00      	cmp	r3, #0
 8002048:	d003      	beq.n	8002052 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002056:	2b00      	cmp	r3, #0
 8002058:	d032      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	2b00      	cmp	r3, #0
 8002064:	d022      	beq.n	80020ac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2205      	movs	r2, #5
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	681a      	ldr	r2, [r3, #0]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0201 	bic.w	r2, r2, #1
 800207c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	3301      	adds	r3, #1
 8002082:	60bb      	str	r3, [r7, #8]
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	429a      	cmp	r2, r3
 8002088:	d307      	bcc.n	800209a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b00      	cmp	r3, #0
 8002096:	d1f2      	bne.n	800207e <HAL_DMA_IRQHandler+0x2ca>
 8002098:	e000      	b.n	800209c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800209a:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	2201      	movs	r2, #1
 80020a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2200      	movs	r2, #0
 80020a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d005      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020b8:	6878      	ldr	r0, [r7, #4]
 80020ba:	4798      	blx	r3
 80020bc:	e000      	b.n	80020c0 <HAL_DMA_IRQHandler+0x30c>
        return;
 80020be:	bf00      	nop
    }
  }
}
 80020c0:	3718      	adds	r7, #24
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bd80      	pop	{r7, pc}
 80020c6:	bf00      	nop

080020c8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	681a      	ldr	r2, [r3, #0]
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80020e4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	689b      	ldr	r3, [r3, #8]
 80020f2:	2b40      	cmp	r3, #64	; 0x40
 80020f4:	d108      	bne.n	8002108 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	687a      	ldr	r2, [r7, #4]
 80020fc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80020fe:	68fb      	ldr	r3, [r7, #12]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	68ba      	ldr	r2, [r7, #8]
 8002104:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002106:	e007      	b.n	8002118 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	68ba      	ldr	r2, [r7, #8]
 800210e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	687a      	ldr	r2, [r7, #4]
 8002116:	60da      	str	r2, [r3, #12]
}
 8002118:	bf00      	nop
 800211a:	3714      	adds	r7, #20
 800211c:	46bd      	mov	sp, r7
 800211e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002122:	4770      	bx	lr

08002124 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	b2db      	uxtb	r3, r3
 8002132:	3b10      	subs	r3, #16
 8002134:	4a14      	ldr	r2, [pc, #80]	; (8002188 <DMA_CalcBaseAndBitshift+0x64>)
 8002136:	fba2 2303 	umull	r2, r3, r2, r3
 800213a:	091b      	lsrs	r3, r3, #4
 800213c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800213e:	4a13      	ldr	r2, [pc, #76]	; (800218c <DMA_CalcBaseAndBitshift+0x68>)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	781b      	ldrb	r3, [r3, #0]
 8002146:	461a      	mov	r2, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	2b03      	cmp	r3, #3
 8002150:	d909      	bls.n	8002166 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800215a:	f023 0303 	bic.w	r3, r3, #3
 800215e:	1d1a      	adds	r2, r3, #4
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	659a      	str	r2, [r3, #88]	; 0x58
 8002164:	e007      	b.n	8002176 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800216e:	f023 0303 	bic.w	r3, r3, #3
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800217a:	4618      	mov	r0, r3
 800217c:	3714      	adds	r7, #20
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	aaaaaaab 	.word	0xaaaaaaab
 800218c:	080038f4 	.word	0x080038f4

08002190 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002190:	b480      	push	{r7}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002198:	2300      	movs	r3, #0
 800219a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021a0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	699b      	ldr	r3, [r3, #24]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d11f      	bne.n	80021ea <DMA_CheckFifoParam+0x5a>
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	2b03      	cmp	r3, #3
 80021ae:	d856      	bhi.n	800225e <DMA_CheckFifoParam+0xce>
 80021b0:	a201      	add	r2, pc, #4	; (adr r2, 80021b8 <DMA_CheckFifoParam+0x28>)
 80021b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021b6:	bf00      	nop
 80021b8:	080021c9 	.word	0x080021c9
 80021bc:	080021db 	.word	0x080021db
 80021c0:	080021c9 	.word	0x080021c9
 80021c4:	0800225f 	.word	0x0800225f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021cc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d046      	beq.n	8002262 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021d8:	e043      	b.n	8002262 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021de:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80021e2:	d140      	bne.n	8002266 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80021e4:	2301      	movs	r3, #1
 80021e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80021e8:	e03d      	b.n	8002266 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	699b      	ldr	r3, [r3, #24]
 80021ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021f2:	d121      	bne.n	8002238 <DMA_CheckFifoParam+0xa8>
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	2b03      	cmp	r3, #3
 80021f8:	d837      	bhi.n	800226a <DMA_CheckFifoParam+0xda>
 80021fa:	a201      	add	r2, pc, #4	; (adr r2, 8002200 <DMA_CheckFifoParam+0x70>)
 80021fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002200:	08002211 	.word	0x08002211
 8002204:	08002217 	.word	0x08002217
 8002208:	08002211 	.word	0x08002211
 800220c:	08002229 	.word	0x08002229
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	73fb      	strb	r3, [r7, #15]
      break;
 8002214:	e030      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800221a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800221e:	2b00      	cmp	r3, #0
 8002220:	d025      	beq.n	800226e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002226:	e022      	b.n	800226e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800222c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002230:	d11f      	bne.n	8002272 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002232:	2301      	movs	r3, #1
 8002234:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002236:	e01c      	b.n	8002272 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	2b02      	cmp	r3, #2
 800223c:	d903      	bls.n	8002246 <DMA_CheckFifoParam+0xb6>
 800223e:	68bb      	ldr	r3, [r7, #8]
 8002240:	2b03      	cmp	r3, #3
 8002242:	d003      	beq.n	800224c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002244:	e018      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	73fb      	strb	r3, [r7, #15]
      break;
 800224a:	e015      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002250:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00e      	beq.n	8002276 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	73fb      	strb	r3, [r7, #15]
      break;
 800225c:	e00b      	b.n	8002276 <DMA_CheckFifoParam+0xe6>
      break;
 800225e:	bf00      	nop
 8002260:	e00a      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 8002262:	bf00      	nop
 8002264:	e008      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 8002266:	bf00      	nop
 8002268:	e006      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 800226a:	bf00      	nop
 800226c:	e004      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 800226e:	bf00      	nop
 8002270:	e002      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;   
 8002272:	bf00      	nop
 8002274:	e000      	b.n	8002278 <DMA_CheckFifoParam+0xe8>
      break;
 8002276:	bf00      	nop
    }
  } 
  
  return status; 
 8002278:	7bfb      	ldrb	r3, [r7, #15]
}
 800227a:	4618      	mov	r0, r3
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop

08002288 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002288:	b480      	push	{r7}
 800228a:	b089      	sub	sp, #36	; 0x24
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002292:	2300      	movs	r3, #0
 8002294:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800229a:	2300      	movs	r3, #0
 800229c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800229e:	2300      	movs	r3, #0
 80022a0:	61fb      	str	r3, [r7, #28]
 80022a2:	e177      	b.n	8002594 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022a4:	2201      	movs	r2, #1
 80022a6:	69fb      	ldr	r3, [r7, #28]
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	697a      	ldr	r2, [r7, #20]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	697b      	ldr	r3, [r7, #20]
 80022bc:	429a      	cmp	r2, r3
 80022be:	f040 8166 	bne.w	800258e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	685b      	ldr	r3, [r3, #4]
 80022c6:	f003 0303 	and.w	r3, r3, #3
 80022ca:	2b01      	cmp	r3, #1
 80022cc:	d005      	beq.n	80022da <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d130      	bne.n	800233c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689b      	ldr	r3, [r3, #8]
 80022de:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	005b      	lsls	r3, r3, #1
 80022e4:	2203      	movs	r2, #3
 80022e6:	fa02 f303 	lsl.w	r3, r2, r3
 80022ea:	43db      	mvns	r3, r3
 80022ec:	69ba      	ldr	r2, [r7, #24]
 80022ee:	4013      	ands	r3, r2
 80022f0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	68da      	ldr	r2, [r3, #12]
 80022f6:	69fb      	ldr	r3, [r7, #28]
 80022f8:	005b      	lsls	r3, r3, #1
 80022fa:	fa02 f303 	lsl.w	r3, r2, r3
 80022fe:	69ba      	ldr	r2, [r7, #24]
 8002300:	4313      	orrs	r3, r2
 8002302:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	69ba      	ldr	r2, [r7, #24]
 8002308:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002310:	2201      	movs	r2, #1
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	fa02 f303 	lsl.w	r3, r2, r3
 8002318:	43db      	mvns	r3, r3
 800231a:	69ba      	ldr	r2, [r7, #24]
 800231c:	4013      	ands	r3, r2
 800231e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	f003 0201 	and.w	r2, r3, #1
 800232a:	69fb      	ldr	r3, [r7, #28]
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	69ba      	ldr	r2, [r7, #24]
 8002332:	4313      	orrs	r3, r2
 8002334:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	f003 0303 	and.w	r3, r3, #3
 8002344:	2b03      	cmp	r3, #3
 8002346:	d017      	beq.n	8002378 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	43db      	mvns	r3, r3
 800235a:	69ba      	ldr	r2, [r7, #24]
 800235c:	4013      	ands	r3, r2
 800235e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	689a      	ldr	r2, [r3, #8]
 8002364:	69fb      	ldr	r3, [r7, #28]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	fa02 f303 	lsl.w	r3, r2, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4313      	orrs	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	69ba      	ldr	r2, [r7, #24]
 8002376:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	f003 0303 	and.w	r3, r3, #3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d123      	bne.n	80023cc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002384:	69fb      	ldr	r3, [r7, #28]
 8002386:	08da      	lsrs	r2, r3, #3
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3208      	adds	r2, #8
 800238c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	f003 0307 	and.w	r3, r3, #7
 8002398:	009b      	lsls	r3, r3, #2
 800239a:	220f      	movs	r2, #15
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	43db      	mvns	r3, r3
 80023a2:	69ba      	ldr	r2, [r7, #24]
 80023a4:	4013      	ands	r3, r2
 80023a6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	691a      	ldr	r2, [r3, #16]
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f003 0307 	and.w	r3, r3, #7
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	69ba      	ldr	r2, [r7, #24]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023be:	69fb      	ldr	r3, [r7, #28]
 80023c0:	08da      	lsrs	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	3208      	adds	r2, #8
 80023c6:	69b9      	ldr	r1, [r7, #24]
 80023c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	2203      	movs	r2, #3
 80023d8:	fa02 f303 	lsl.w	r3, r2, r3
 80023dc:	43db      	mvns	r3, r3
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4013      	ands	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	f003 0203 	and.w	r2, r3, #3
 80023ec:	69fb      	ldr	r3, [r7, #28]
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	fa02 f303 	lsl.w	r3, r2, r3
 80023f4:	69ba      	ldr	r2, [r7, #24]
 80023f6:	4313      	orrs	r3, r2
 80023f8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 80c0 	beq.w	800258e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b66      	ldr	r3, [pc, #408]	; (80025ac <HAL_GPIO_Init+0x324>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a65      	ldr	r2, [pc, #404]	; (80025ac <HAL_GPIO_Init+0x324>)
 8002418:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b63      	ldr	r3, [pc, #396]	; (80025ac <HAL_GPIO_Init+0x324>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800242a:	4a61      	ldr	r2, [pc, #388]	; (80025b0 <HAL_GPIO_Init+0x328>)
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	089b      	lsrs	r3, r3, #2
 8002430:	3302      	adds	r3, #2
 8002432:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002436:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002438:	69fb      	ldr	r3, [r7, #28]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	220f      	movs	r2, #15
 8002442:	fa02 f303 	lsl.w	r3, r2, r3
 8002446:	43db      	mvns	r3, r3
 8002448:	69ba      	ldr	r2, [r7, #24]
 800244a:	4013      	ands	r3, r2
 800244c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	4a58      	ldr	r2, [pc, #352]	; (80025b4 <HAL_GPIO_Init+0x32c>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d037      	beq.n	80024c6 <HAL_GPIO_Init+0x23e>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4a57      	ldr	r2, [pc, #348]	; (80025b8 <HAL_GPIO_Init+0x330>)
 800245a:	4293      	cmp	r3, r2
 800245c:	d031      	beq.n	80024c2 <HAL_GPIO_Init+0x23a>
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a56      	ldr	r2, [pc, #344]	; (80025bc <HAL_GPIO_Init+0x334>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d02b      	beq.n	80024be <HAL_GPIO_Init+0x236>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	4a55      	ldr	r2, [pc, #340]	; (80025c0 <HAL_GPIO_Init+0x338>)
 800246a:	4293      	cmp	r3, r2
 800246c:	d025      	beq.n	80024ba <HAL_GPIO_Init+0x232>
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	4a54      	ldr	r2, [pc, #336]	; (80025c4 <HAL_GPIO_Init+0x33c>)
 8002472:	4293      	cmp	r3, r2
 8002474:	d01f      	beq.n	80024b6 <HAL_GPIO_Init+0x22e>
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a53      	ldr	r2, [pc, #332]	; (80025c8 <HAL_GPIO_Init+0x340>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d019      	beq.n	80024b2 <HAL_GPIO_Init+0x22a>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a52      	ldr	r2, [pc, #328]	; (80025cc <HAL_GPIO_Init+0x344>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_GPIO_Init+0x226>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a51      	ldr	r2, [pc, #324]	; (80025d0 <HAL_GPIO_Init+0x348>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00d      	beq.n	80024aa <HAL_GPIO_Init+0x222>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a50      	ldr	r2, [pc, #320]	; (80025d4 <HAL_GPIO_Init+0x34c>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_Init+0x21e>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a4f      	ldr	r2, [pc, #316]	; (80025d8 <HAL_GPIO_Init+0x350>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_GPIO_Init+0x21a>
 800249e:	2309      	movs	r3, #9
 80024a0:	e012      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024a2:	230a      	movs	r3, #10
 80024a4:	e010      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024a6:	2308      	movs	r3, #8
 80024a8:	e00e      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024aa:	2307      	movs	r3, #7
 80024ac:	e00c      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024ae:	2306      	movs	r3, #6
 80024b0:	e00a      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024b2:	2305      	movs	r3, #5
 80024b4:	e008      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024b6:	2304      	movs	r3, #4
 80024b8:	e006      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024ba:	2303      	movs	r3, #3
 80024bc:	e004      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024be:	2302      	movs	r3, #2
 80024c0:	e002      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_GPIO_Init+0x240>
 80024c6:	2300      	movs	r3, #0
 80024c8:	69fa      	ldr	r2, [r7, #28]
 80024ca:	f002 0203 	and.w	r2, r2, #3
 80024ce:	0092      	lsls	r2, r2, #2
 80024d0:	4093      	lsls	r3, r2
 80024d2:	69ba      	ldr	r2, [r7, #24]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024d8:	4935      	ldr	r1, [pc, #212]	; (80025b0 <HAL_GPIO_Init+0x328>)
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	089b      	lsrs	r3, r3, #2
 80024de:	3302      	adds	r3, #2
 80024e0:	69ba      	ldr	r2, [r7, #24]
 80024e2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024e6:	4b3d      	ldr	r3, [pc, #244]	; (80025dc <HAL_GPIO_Init+0x354>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024ec:	693b      	ldr	r3, [r7, #16]
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d003      	beq.n	800250a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002502:	69ba      	ldr	r2, [r7, #24]
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4313      	orrs	r3, r2
 8002508:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800250a:	4a34      	ldr	r2, [pc, #208]	; (80025dc <HAL_GPIO_Init+0x354>)
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002510:	4b32      	ldr	r3, [pc, #200]	; (80025dc <HAL_GPIO_Init+0x354>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002516:	693b      	ldr	r3, [r7, #16]
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002528:	2b00      	cmp	r3, #0
 800252a:	d003      	beq.n	8002534 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800252c:	69ba      	ldr	r2, [r7, #24]
 800252e:	693b      	ldr	r3, [r7, #16]
 8002530:	4313      	orrs	r3, r2
 8002532:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002534:	4a29      	ldr	r2, [pc, #164]	; (80025dc <HAL_GPIO_Init+0x354>)
 8002536:	69bb      	ldr	r3, [r7, #24]
 8002538:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800253a:	4b28      	ldr	r3, [pc, #160]	; (80025dc <HAL_GPIO_Init+0x354>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002540:	693b      	ldr	r3, [r7, #16]
 8002542:	43db      	mvns	r3, r3
 8002544:	69ba      	ldr	r2, [r7, #24]
 8002546:	4013      	ands	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	685b      	ldr	r3, [r3, #4]
 800254e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002552:	2b00      	cmp	r3, #0
 8002554:	d003      	beq.n	800255e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002556:	69ba      	ldr	r2, [r7, #24]
 8002558:	693b      	ldr	r3, [r7, #16]
 800255a:	4313      	orrs	r3, r2
 800255c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800255e:	4a1f      	ldr	r2, [pc, #124]	; (80025dc <HAL_GPIO_Init+0x354>)
 8002560:	69bb      	ldr	r3, [r7, #24]
 8002562:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002564:	4b1d      	ldr	r3, [pc, #116]	; (80025dc <HAL_GPIO_Init+0x354>)
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	43db      	mvns	r3, r3
 800256e:	69ba      	ldr	r2, [r7, #24]
 8002570:	4013      	ands	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800257c:	2b00      	cmp	r3, #0
 800257e:	d003      	beq.n	8002588 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	693b      	ldr	r3, [r7, #16]
 8002584:	4313      	orrs	r3, r2
 8002586:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002588:	4a14      	ldr	r2, [pc, #80]	; (80025dc <HAL_GPIO_Init+0x354>)
 800258a:	69bb      	ldr	r3, [r7, #24]
 800258c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800258e:	69fb      	ldr	r3, [r7, #28]
 8002590:	3301      	adds	r3, #1
 8002592:	61fb      	str	r3, [r7, #28]
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	2b0f      	cmp	r3, #15
 8002598:	f67f ae84 	bls.w	80022a4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800259c:	bf00      	nop
 800259e:	bf00      	nop
 80025a0:	3724      	adds	r7, #36	; 0x24
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	40023800 	.word	0x40023800
 80025b0:	40013800 	.word	0x40013800
 80025b4:	40020000 	.word	0x40020000
 80025b8:	40020400 	.word	0x40020400
 80025bc:	40020800 	.word	0x40020800
 80025c0:	40020c00 	.word	0x40020c00
 80025c4:	40021000 	.word	0x40021000
 80025c8:	40021400 	.word	0x40021400
 80025cc:	40021800 	.word	0x40021800
 80025d0:	40021c00 	.word	0x40021c00
 80025d4:	40022000 	.word	0x40022000
 80025d8:	40022400 	.word	0x40022400
 80025dc:	40013c00 	.word	0x40013c00

080025e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
 80025e8:	460b      	mov	r3, r1
 80025ea:	807b      	strh	r3, [r7, #2]
 80025ec:	4613      	mov	r3, r2
 80025ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025f0:	787b      	ldrb	r3, [r7, #1]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d003      	beq.n	80025fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025f6:	887a      	ldrh	r2, [r7, #2]
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025fc:	e003      	b.n	8002606 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025fe:	887b      	ldrh	r3, [r7, #2]
 8002600:	041a      	lsls	r2, r3, #16
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	619a      	str	r2, [r3, #24]
}
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
	...

08002614 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b082      	sub	sp, #8
 8002618:	af00      	add	r7, sp, #0
 800261a:	4603      	mov	r3, r0
 800261c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800261e:	4b08      	ldr	r3, [pc, #32]	; (8002640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002620:	695a      	ldr	r2, [r3, #20]
 8002622:	88fb      	ldrh	r3, [r7, #6]
 8002624:	4013      	ands	r3, r2
 8002626:	2b00      	cmp	r3, #0
 8002628:	d006      	beq.n	8002638 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800262a:	4a05      	ldr	r2, [pc, #20]	; (8002640 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800262c:	88fb      	ldrh	r3, [r7, #6]
 800262e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002630:	88fb      	ldrh	r3, [r7, #6]
 8002632:	4618      	mov	r0, r3
 8002634:	f7fe fb60 	bl	8000cf8 <HAL_GPIO_EXTI_Callback>
  }
}
 8002638:	bf00      	nop
 800263a:	3708      	adds	r7, #8
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40013c00 	.word	0x40013c00

08002644 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d101      	bne.n	8002656 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002652:	2301      	movs	r3, #1
 8002654:	e264      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b00      	cmp	r3, #0
 8002660:	d075      	beq.n	800274e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002662:	4ba3      	ldr	r3, [pc, #652]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	f003 030c 	and.w	r3, r3, #12
 800266a:	2b04      	cmp	r3, #4
 800266c:	d00c      	beq.n	8002688 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800266e:	4ba0      	ldr	r3, [pc, #640]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 8002670:	689b      	ldr	r3, [r3, #8]
 8002672:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002676:	2b08      	cmp	r3, #8
 8002678:	d112      	bne.n	80026a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800267a:	4b9d      	ldr	r3, [pc, #628]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 800267c:	685b      	ldr	r3, [r3, #4]
 800267e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002682:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002686:	d10b      	bne.n	80026a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002688:	4b99      	ldr	r3, [pc, #612]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002690:	2b00      	cmp	r3, #0
 8002692:	d05b      	beq.n	800274c <HAL_RCC_OscConfig+0x108>
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d157      	bne.n	800274c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800269c:	2301      	movs	r3, #1
 800269e:	e23f      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a8:	d106      	bne.n	80026b8 <HAL_RCC_OscConfig+0x74>
 80026aa:	4b91      	ldr	r3, [pc, #580]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a90      	ldr	r2, [pc, #576]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80026b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b4:	6013      	str	r3, [r2, #0]
 80026b6:	e01d      	b.n	80026f4 <HAL_RCC_OscConfig+0xb0>
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	685b      	ldr	r3, [r3, #4]
 80026bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026c0:	d10c      	bne.n	80026dc <HAL_RCC_OscConfig+0x98>
 80026c2:	4b8b      	ldr	r3, [pc, #556]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	4a8a      	ldr	r2, [pc, #552]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80026c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026cc:	6013      	str	r3, [r2, #0]
 80026ce:	4b88      	ldr	r3, [pc, #544]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4a87      	ldr	r2, [pc, #540]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80026d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d8:	6013      	str	r3, [r2, #0]
 80026da:	e00b      	b.n	80026f4 <HAL_RCC_OscConfig+0xb0>
 80026dc:	4b84      	ldr	r3, [pc, #528]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	4a83      	ldr	r2, [pc, #524]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80026e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e6:	6013      	str	r3, [r2, #0]
 80026e8:	4b81      	ldr	r3, [pc, #516]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	4a80      	ldr	r2, [pc, #512]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80026ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d013      	beq.n	8002724 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fc:	f7fe fd34 	bl	8001168 <HAL_GetTick>
 8002700:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002704:	f7fe fd30 	bl	8001168 <HAL_GetTick>
 8002708:	4602      	mov	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b64      	cmp	r3, #100	; 0x64
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e204      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002716:	4b76      	ldr	r3, [pc, #472]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800271e:	2b00      	cmp	r3, #0
 8002720:	d0f0      	beq.n	8002704 <HAL_RCC_OscConfig+0xc0>
 8002722:	e014      	b.n	800274e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002724:	f7fe fd20 	bl	8001168 <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800272c:	f7fe fd1c 	bl	8001168 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b64      	cmp	r3, #100	; 0x64
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e1f0      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800273e:	4b6c      	ldr	r3, [pc, #432]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0xe8>
 800274a:	e000      	b.n	800274e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800274c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f003 0302 	and.w	r3, r3, #2
 8002756:	2b00      	cmp	r3, #0
 8002758:	d063      	beq.n	8002822 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800275a:	4b65      	ldr	r3, [pc, #404]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 800275c:	689b      	ldr	r3, [r3, #8]
 800275e:	f003 030c 	and.w	r3, r3, #12
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00b      	beq.n	800277e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002766:	4b62      	ldr	r3, [pc, #392]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800276e:	2b08      	cmp	r3, #8
 8002770:	d11c      	bne.n	80027ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002772:	4b5f      	ldr	r3, [pc, #380]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 8002774:	685b      	ldr	r3, [r3, #4]
 8002776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800277a:	2b00      	cmp	r3, #0
 800277c:	d116      	bne.n	80027ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800277e:	4b5c      	ldr	r3, [pc, #368]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d005      	beq.n	8002796 <HAL_RCC_OscConfig+0x152>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	68db      	ldr	r3, [r3, #12]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d001      	beq.n	8002796 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002792:	2301      	movs	r3, #1
 8002794:	e1c4      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002796:	4b56      	ldr	r3, [pc, #344]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	691b      	ldr	r3, [r3, #16]
 80027a2:	00db      	lsls	r3, r3, #3
 80027a4:	4952      	ldr	r1, [pc, #328]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80027a6:	4313      	orrs	r3, r2
 80027a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80027aa:	e03a      	b.n	8002822 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	68db      	ldr	r3, [r3, #12]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d020      	beq.n	80027f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027b4:	4b4f      	ldr	r3, [pc, #316]	; (80028f4 <HAL_RCC_OscConfig+0x2b0>)
 80027b6:	2201      	movs	r2, #1
 80027b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe fcd5 	bl	8001168 <HAL_GetTick>
 80027be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80027c2:	f7fe fcd1 	bl	8001168 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	693b      	ldr	r3, [r7, #16]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e1a5      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d4:	4b46      	ldr	r3, [pc, #280]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4b43      	ldr	r3, [pc, #268]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	00db      	lsls	r3, r3, #3
 80027ee:	4940      	ldr	r1, [pc, #256]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	600b      	str	r3, [r1, #0]
 80027f4:	e015      	b.n	8002822 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f6:	4b3f      	ldr	r3, [pc, #252]	; (80028f4 <HAL_RCC_OscConfig+0x2b0>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fc:	f7fe fcb4 	bl	8001168 <HAL_GetTick>
 8002800:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002802:	e008      	b.n	8002816 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002804:	f7fe fcb0 	bl	8001168 <HAL_GetTick>
 8002808:	4602      	mov	r2, r0
 800280a:	693b      	ldr	r3, [r7, #16]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	2b02      	cmp	r3, #2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e184      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002816:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	2b00      	cmp	r3, #0
 8002820:	d1f0      	bne.n	8002804 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f003 0308 	and.w	r3, r3, #8
 800282a:	2b00      	cmp	r3, #0
 800282c:	d030      	beq.n	8002890 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	695b      	ldr	r3, [r3, #20]
 8002832:	2b00      	cmp	r3, #0
 8002834:	d016      	beq.n	8002864 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002836:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <HAL_RCC_OscConfig+0x2b4>)
 8002838:	2201      	movs	r2, #1
 800283a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800283c:	f7fe fc94 	bl	8001168 <HAL_GetTick>
 8002840:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002842:	e008      	b.n	8002856 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002844:	f7fe fc90 	bl	8001168 <HAL_GetTick>
 8002848:	4602      	mov	r2, r0
 800284a:	693b      	ldr	r3, [r7, #16]
 800284c:	1ad3      	subs	r3, r2, r3
 800284e:	2b02      	cmp	r3, #2
 8002850:	d901      	bls.n	8002856 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002852:	2303      	movs	r3, #3
 8002854:	e164      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002856:	4b26      	ldr	r3, [pc, #152]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 8002858:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800285a:	f003 0302 	and.w	r3, r3, #2
 800285e:	2b00      	cmp	r3, #0
 8002860:	d0f0      	beq.n	8002844 <HAL_RCC_OscConfig+0x200>
 8002862:	e015      	b.n	8002890 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002864:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCC_OscConfig+0x2b4>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800286a:	f7fe fc7d 	bl	8001168 <HAL_GetTick>
 800286e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002870:	e008      	b.n	8002884 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002872:	f7fe fc79 	bl	8001168 <HAL_GetTick>
 8002876:	4602      	mov	r2, r0
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1ad3      	subs	r3, r2, r3
 800287c:	2b02      	cmp	r3, #2
 800287e:	d901      	bls.n	8002884 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e14d      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002884:	4b1a      	ldr	r3, [pc, #104]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 8002886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002888:	f003 0302 	and.w	r3, r3, #2
 800288c:	2b00      	cmp	r3, #0
 800288e:	d1f0      	bne.n	8002872 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f003 0304 	and.w	r3, r3, #4
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 80a0 	beq.w	80029de <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800289e:	2300      	movs	r3, #0
 80028a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80028a2:	4b13      	ldr	r3, [pc, #76]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d10f      	bne.n	80028ce <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80028ae:	2300      	movs	r3, #0
 80028b0:	60bb      	str	r3, [r7, #8]
 80028b2:	4b0f      	ldr	r3, [pc, #60]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80028b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b6:	4a0e      	ldr	r2, [pc, #56]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80028b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028bc:	6413      	str	r3, [r2, #64]	; 0x40
 80028be:	4b0c      	ldr	r3, [pc, #48]	; (80028f0 <HAL_RCC_OscConfig+0x2ac>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80028ca:	2301      	movs	r3, #1
 80028cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ce:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_OscConfig+0x2b8>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d121      	bne.n	800291e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80028da:	4b08      	ldr	r3, [pc, #32]	; (80028fc <HAL_RCC_OscConfig+0x2b8>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a07      	ldr	r2, [pc, #28]	; (80028fc <HAL_RCC_OscConfig+0x2b8>)
 80028e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028e6:	f7fe fc3f 	bl	8001168 <HAL_GetTick>
 80028ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80028ec:	e011      	b.n	8002912 <HAL_RCC_OscConfig+0x2ce>
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	42470000 	.word	0x42470000
 80028f8:	42470e80 	.word	0x42470e80
 80028fc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002900:	f7fe fc32 	bl	8001168 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e106      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002912:	4b85      	ldr	r3, [pc, #532]	; (8002b28 <HAL_RCC_OscConfig+0x4e4>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800291a:	2b00      	cmp	r3, #0
 800291c:	d0f0      	beq.n	8002900 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d106      	bne.n	8002934 <HAL_RCC_OscConfig+0x2f0>
 8002926:	4b81      	ldr	r3, [pc, #516]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800292a:	4a80      	ldr	r2, [pc, #512]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 800292c:	f043 0301 	orr.w	r3, r3, #1
 8002930:	6713      	str	r3, [r2, #112]	; 0x70
 8002932:	e01c      	b.n	800296e <HAL_RCC_OscConfig+0x32a>
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	2b05      	cmp	r3, #5
 800293a:	d10c      	bne.n	8002956 <HAL_RCC_OscConfig+0x312>
 800293c:	4b7b      	ldr	r3, [pc, #492]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 800293e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002940:	4a7a      	ldr	r2, [pc, #488]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 8002942:	f043 0304 	orr.w	r3, r3, #4
 8002946:	6713      	str	r3, [r2, #112]	; 0x70
 8002948:	4b78      	ldr	r3, [pc, #480]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 800294a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800294c:	4a77      	ldr	r2, [pc, #476]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 800294e:	f043 0301 	orr.w	r3, r3, #1
 8002952:	6713      	str	r3, [r2, #112]	; 0x70
 8002954:	e00b      	b.n	800296e <HAL_RCC_OscConfig+0x32a>
 8002956:	4b75      	ldr	r3, [pc, #468]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 8002958:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800295a:	4a74      	ldr	r2, [pc, #464]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 800295c:	f023 0301 	bic.w	r3, r3, #1
 8002960:	6713      	str	r3, [r2, #112]	; 0x70
 8002962:	4b72      	ldr	r3, [pc, #456]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 8002964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002966:	4a71      	ldr	r2, [pc, #452]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 8002968:	f023 0304 	bic.w	r3, r3, #4
 800296c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d015      	beq.n	80029a2 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fe fbf7 	bl	8001168 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fe fbf3 	bl	8001168 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	; 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e0c5      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002994:	4b65      	ldr	r3, [pc, #404]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 8002996:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002998:	f003 0302 	and.w	r3, r3, #2
 800299c:	2b00      	cmp	r3, #0
 800299e:	d0ee      	beq.n	800297e <HAL_RCC_OscConfig+0x33a>
 80029a0:	e014      	b.n	80029cc <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a2:	f7fe fbe1 	bl	8001168 <HAL_GetTick>
 80029a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029a8:	e00a      	b.n	80029c0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029aa:	f7fe fbdd 	bl	8001168 <HAL_GetTick>
 80029ae:	4602      	mov	r2, r0
 80029b0:	693b      	ldr	r3, [r7, #16]
 80029b2:	1ad3      	subs	r3, r2, r3
 80029b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d901      	bls.n	80029c0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80029bc:	2303      	movs	r3, #3
 80029be:	e0af      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80029c0:	4b5a      	ldr	r3, [pc, #360]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 80029c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1ee      	bne.n	80029aa <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029cc:	7dfb      	ldrb	r3, [r7, #23]
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d105      	bne.n	80029de <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029d2:	4b56      	ldr	r3, [pc, #344]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	4a55      	ldr	r2, [pc, #340]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 80029d8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029dc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	f000 809b 	beq.w	8002b1e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80029e8:	4b50      	ldr	r3, [pc, #320]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 80029ea:	689b      	ldr	r3, [r3, #8]
 80029ec:	f003 030c 	and.w	r3, r3, #12
 80029f0:	2b08      	cmp	r3, #8
 80029f2:	d05c      	beq.n	8002aae <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	699b      	ldr	r3, [r3, #24]
 80029f8:	2b02      	cmp	r3, #2
 80029fa:	d141      	bne.n	8002a80 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fc:	4b4c      	ldr	r3, [pc, #304]	; (8002b30 <HAL_RCC_OscConfig+0x4ec>)
 80029fe:	2200      	movs	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a02:	f7fe fbb1 	bl	8001168 <HAL_GetTick>
 8002a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a08:	e008      	b.n	8002a1c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a0a:	f7fe fbad 	bl	8001168 <HAL_GetTick>
 8002a0e:	4602      	mov	r2, r0
 8002a10:	693b      	ldr	r3, [r7, #16]
 8002a12:	1ad3      	subs	r3, r2, r3
 8002a14:	2b02      	cmp	r3, #2
 8002a16:	d901      	bls.n	8002a1c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002a18:	2303      	movs	r3, #3
 8002a1a:	e081      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a1c:	4b43      	ldr	r3, [pc, #268]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1f0      	bne.n	8002a0a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	69da      	ldr	r2, [r3, #28]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	431a      	orrs	r2, r3
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a36:	019b      	lsls	r3, r3, #6
 8002a38:	431a      	orrs	r2, r3
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a3e:	085b      	lsrs	r3, r3, #1
 8002a40:	3b01      	subs	r3, #1
 8002a42:	041b      	lsls	r3, r3, #16
 8002a44:	431a      	orrs	r2, r3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4a:	061b      	lsls	r3, r3, #24
 8002a4c:	4937      	ldr	r1, [pc, #220]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a52:	4b37      	ldr	r3, [pc, #220]	; (8002b30 <HAL_RCC_OscConfig+0x4ec>)
 8002a54:	2201      	movs	r2, #1
 8002a56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a58:	f7fe fb86 	bl	8001168 <HAL_GetTick>
 8002a5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a5e:	e008      	b.n	8002a72 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a60:	f7fe fb82 	bl	8001168 <HAL_GetTick>
 8002a64:	4602      	mov	r2, r0
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	1ad3      	subs	r3, r2, r3
 8002a6a:	2b02      	cmp	r3, #2
 8002a6c:	d901      	bls.n	8002a72 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8002a6e:	2303      	movs	r3, #3
 8002a70:	e056      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a72:	4b2e      	ldr	r3, [pc, #184]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d0f0      	beq.n	8002a60 <HAL_RCC_OscConfig+0x41c>
 8002a7e:	e04e      	b.n	8002b1e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a80:	4b2b      	ldr	r3, [pc, #172]	; (8002b30 <HAL_RCC_OscConfig+0x4ec>)
 8002a82:	2200      	movs	r2, #0
 8002a84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a86:	f7fe fb6f 	bl	8001168 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a8e:	f7fe fb6b 	bl	8001168 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e03f      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002aa0:	4b22      	ldr	r3, [pc, #136]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d1f0      	bne.n	8002a8e <HAL_RCC_OscConfig+0x44a>
 8002aac:	e037      	b.n	8002b1e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d101      	bne.n	8002aba <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8002ab6:	2301      	movs	r3, #1
 8002ab8:	e032      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002aba:	4b1c      	ldr	r3, [pc, #112]	; (8002b2c <HAL_RCC_OscConfig+0x4e8>)
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	699b      	ldr	r3, [r3, #24]
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d028      	beq.n	8002b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d121      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ae0:	429a      	cmp	r2, r3
 8002ae2:	d11a      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ae4:	68fa      	ldr	r2, [r7, #12]
 8002ae6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002aea:	4013      	ands	r3, r2
 8002aec:	687a      	ldr	r2, [r7, #4]
 8002aee:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002af0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d111      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b00:	085b      	lsrs	r3, r3, #1
 8002b02:	3b01      	subs	r3, #1
 8002b04:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002b06:	429a      	cmp	r2, r3
 8002b08:	d107      	bne.n	8002b1a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b14:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002b16:	429a      	cmp	r2, r3
 8002b18:	d001      	beq.n	8002b1e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e000      	b.n	8002b20 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8002b1e:	2300      	movs	r3, #0
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	3718      	adds	r7, #24
 8002b24:	46bd      	mov	sp, r7
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	40007000 	.word	0x40007000
 8002b2c:	40023800 	.word	0x40023800
 8002b30:	42470060 	.word	0x42470060

08002b34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b084      	sub	sp, #16
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e0cc      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b48:	4b68      	ldr	r3, [pc, #416]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 030f 	and.w	r3, r3, #15
 8002b50:	683a      	ldr	r2, [r7, #0]
 8002b52:	429a      	cmp	r2, r3
 8002b54:	d90c      	bls.n	8002b70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b56:	4b65      	ldr	r3, [pc, #404]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002b58:	683a      	ldr	r2, [r7, #0]
 8002b5a:	b2d2      	uxtb	r2, r2
 8002b5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b5e:	4b63      	ldr	r3, [pc, #396]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f003 030f 	and.w	r3, r3, #15
 8002b66:	683a      	ldr	r2, [r7, #0]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d001      	beq.n	8002b70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e0b8      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d020      	beq.n	8002bbe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f003 0304 	and.w	r3, r3, #4
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d005      	beq.n	8002b94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002b88:	4b59      	ldr	r3, [pc, #356]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8a:	689b      	ldr	r3, [r3, #8]
 8002b8c:	4a58      	ldr	r2, [pc, #352]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002b8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002b92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	f003 0308 	and.w	r3, r3, #8
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d005      	beq.n	8002bac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ba0:	4b53      	ldr	r3, [pc, #332]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba2:	689b      	ldr	r3, [r3, #8]
 8002ba4:	4a52      	ldr	r2, [pc, #328]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ba6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002baa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002bac:	4b50      	ldr	r3, [pc, #320]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	689b      	ldr	r3, [r3, #8]
 8002bb8:	494d      	ldr	r1, [pc, #308]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f003 0301 	and.w	r3, r3, #1
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d044      	beq.n	8002c54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	685b      	ldr	r3, [r3, #4]
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d107      	bne.n	8002be2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	4b47      	ldr	r3, [pc, #284]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d119      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e07f      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	685b      	ldr	r3, [r3, #4]
 8002be6:	2b02      	cmp	r3, #2
 8002be8:	d003      	beq.n	8002bf2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002bee:	2b03      	cmp	r3, #3
 8002bf0:	d107      	bne.n	8002c02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bf2:	4b3f      	ldr	r3, [pc, #252]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d109      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	e06f      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c02:	4b3b      	ldr	r3, [pc, #236]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0302 	and.w	r3, r3, #2
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e067      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c12:	4b37      	ldr	r3, [pc, #220]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c14:	689b      	ldr	r3, [r3, #8]
 8002c16:	f023 0203 	bic.w	r2, r3, #3
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	4934      	ldr	r1, [pc, #208]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c20:	4313      	orrs	r3, r2
 8002c22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002c24:	f7fe faa0 	bl	8001168 <HAL_GetTick>
 8002c28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c2a:	e00a      	b.n	8002c42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2c:	f7fe fa9c 	bl	8001168 <HAL_GetTick>
 8002c30:	4602      	mov	r2, r0
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d901      	bls.n	8002c42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e04f      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c42:	4b2b      	ldr	r3, [pc, #172]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 020c 	and.w	r2, r3, #12
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	009b      	lsls	r3, r3, #2
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d1eb      	bne.n	8002c2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c54:	4b25      	ldr	r3, [pc, #148]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	f003 030f 	and.w	r3, r3, #15
 8002c5c:	683a      	ldr	r2, [r7, #0]
 8002c5e:	429a      	cmp	r2, r3
 8002c60:	d20c      	bcs.n	8002c7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c62:	4b22      	ldr	r3, [pc, #136]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c6a:	4b20      	ldr	r3, [pc, #128]	; (8002cec <HAL_RCC_ClockConfig+0x1b8>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 030f 	and.w	r3, r3, #15
 8002c72:	683a      	ldr	r2, [r7, #0]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d001      	beq.n	8002c7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	e032      	b.n	8002ce2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f003 0304 	and.w	r3, r3, #4
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d008      	beq.n	8002c9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002c88:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c8a:	689b      	ldr	r3, [r3, #8]
 8002c8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	68db      	ldr	r3, [r3, #12]
 8002c94:	4916      	ldr	r1, [pc, #88]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002c96:	4313      	orrs	r3, r2
 8002c98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0308 	and.w	r3, r3, #8
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d009      	beq.n	8002cba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002ca6:	4b12      	ldr	r3, [pc, #72]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	691b      	ldr	r3, [r3, #16]
 8002cb2:	00db      	lsls	r3, r3, #3
 8002cb4:	490e      	ldr	r1, [pc, #56]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cb6:	4313      	orrs	r3, r2
 8002cb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002cba:	f000 f821 	bl	8002d00 <HAL_RCC_GetSysClockFreq>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	4b0b      	ldr	r3, [pc, #44]	; (8002cf0 <HAL_RCC_ClockConfig+0x1bc>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	091b      	lsrs	r3, r3, #4
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	490a      	ldr	r1, [pc, #40]	; (8002cf4 <HAL_RCC_ClockConfig+0x1c0>)
 8002ccc:	5ccb      	ldrb	r3, [r1, r3]
 8002cce:	fa22 f303 	lsr.w	r3, r2, r3
 8002cd2:	4a09      	ldr	r2, [pc, #36]	; (8002cf8 <HAL_RCC_ClockConfig+0x1c4>)
 8002cd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002cd6:	4b09      	ldr	r3, [pc, #36]	; (8002cfc <HAL_RCC_ClockConfig+0x1c8>)
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fe f928 	bl	8000f30 <HAL_InitTick>

  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3710      	adds	r7, #16
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	40023c00 	.word	0x40023c00
 8002cf0:	40023800 	.word	0x40023800
 8002cf4:	080038dc 	.word	0x080038dc
 8002cf8:	20000008 	.word	0x20000008
 8002cfc:	2000000c 	.word	0x2000000c

08002d00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002d08:	2300      	movs	r3, #0
 8002d0a:	607b      	str	r3, [r7, #4]
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	60fb      	str	r3, [r7, #12]
 8002d10:	2300      	movs	r3, #0
 8002d12:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002d18:	4b67      	ldr	r3, [pc, #412]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 030c 	and.w	r3, r3, #12
 8002d20:	2b08      	cmp	r3, #8
 8002d22:	d00d      	beq.n	8002d40 <HAL_RCC_GetSysClockFreq+0x40>
 8002d24:	2b08      	cmp	r3, #8
 8002d26:	f200 80bd 	bhi.w	8002ea4 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d002      	beq.n	8002d34 <HAL_RCC_GetSysClockFreq+0x34>
 8002d2e:	2b04      	cmp	r3, #4
 8002d30:	d003      	beq.n	8002d3a <HAL_RCC_GetSysClockFreq+0x3a>
 8002d32:	e0b7      	b.n	8002ea4 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002d34:	4b61      	ldr	r3, [pc, #388]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002d36:	60bb      	str	r3, [r7, #8]
       break;
 8002d38:	e0b7      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002d3a:	4b61      	ldr	r3, [pc, #388]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002d3c:	60bb      	str	r3, [r7, #8]
      break;
 8002d3e:	e0b4      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002d40:	4b5d      	ldr	r3, [pc, #372]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002d48:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002d4a:	4b5b      	ldr	r3, [pc, #364]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d4c:	685b      	ldr	r3, [r3, #4]
 8002d4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d04d      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d56:	4b58      	ldr	r3, [pc, #352]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	099b      	lsrs	r3, r3, #6
 8002d5c:	461a      	mov	r2, r3
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002d66:	f04f 0100 	mov.w	r1, #0
 8002d6a:	ea02 0800 	and.w	r8, r2, r0
 8002d6e:	ea03 0901 	and.w	r9, r3, r1
 8002d72:	4640      	mov	r0, r8
 8002d74:	4649      	mov	r1, r9
 8002d76:	f04f 0200 	mov.w	r2, #0
 8002d7a:	f04f 0300 	mov.w	r3, #0
 8002d7e:	014b      	lsls	r3, r1, #5
 8002d80:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002d84:	0142      	lsls	r2, r0, #5
 8002d86:	4610      	mov	r0, r2
 8002d88:	4619      	mov	r1, r3
 8002d8a:	ebb0 0008 	subs.w	r0, r0, r8
 8002d8e:	eb61 0109 	sbc.w	r1, r1, r9
 8002d92:	f04f 0200 	mov.w	r2, #0
 8002d96:	f04f 0300 	mov.w	r3, #0
 8002d9a:	018b      	lsls	r3, r1, #6
 8002d9c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002da0:	0182      	lsls	r2, r0, #6
 8002da2:	1a12      	subs	r2, r2, r0
 8002da4:	eb63 0301 	sbc.w	r3, r3, r1
 8002da8:	f04f 0000 	mov.w	r0, #0
 8002dac:	f04f 0100 	mov.w	r1, #0
 8002db0:	00d9      	lsls	r1, r3, #3
 8002db2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002db6:	00d0      	lsls	r0, r2, #3
 8002db8:	4602      	mov	r2, r0
 8002dba:	460b      	mov	r3, r1
 8002dbc:	eb12 0208 	adds.w	r2, r2, r8
 8002dc0:	eb43 0309 	adc.w	r3, r3, r9
 8002dc4:	f04f 0000 	mov.w	r0, #0
 8002dc8:	f04f 0100 	mov.w	r1, #0
 8002dcc:	0259      	lsls	r1, r3, #9
 8002dce:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002dd2:	0250      	lsls	r0, r2, #9
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4610      	mov	r0, r2
 8002dda:	4619      	mov	r1, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	461a      	mov	r2, r3
 8002de0:	f04f 0300 	mov.w	r3, #0
 8002de4:	f7fd fa02 	bl	80001ec <__aeabi_uldivmod>
 8002de8:	4602      	mov	r2, r0
 8002dea:	460b      	mov	r3, r1
 8002dec:	4613      	mov	r3, r2
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	e04a      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002df2:	4b31      	ldr	r3, [pc, #196]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002df4:	685b      	ldr	r3, [r3, #4]
 8002df6:	099b      	lsrs	r3, r3, #6
 8002df8:	461a      	mov	r2, r3
 8002dfa:	f04f 0300 	mov.w	r3, #0
 8002dfe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002e02:	f04f 0100 	mov.w	r1, #0
 8002e06:	ea02 0400 	and.w	r4, r2, r0
 8002e0a:	ea03 0501 	and.w	r5, r3, r1
 8002e0e:	4620      	mov	r0, r4
 8002e10:	4629      	mov	r1, r5
 8002e12:	f04f 0200 	mov.w	r2, #0
 8002e16:	f04f 0300 	mov.w	r3, #0
 8002e1a:	014b      	lsls	r3, r1, #5
 8002e1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002e20:	0142      	lsls	r2, r0, #5
 8002e22:	4610      	mov	r0, r2
 8002e24:	4619      	mov	r1, r3
 8002e26:	1b00      	subs	r0, r0, r4
 8002e28:	eb61 0105 	sbc.w	r1, r1, r5
 8002e2c:	f04f 0200 	mov.w	r2, #0
 8002e30:	f04f 0300 	mov.w	r3, #0
 8002e34:	018b      	lsls	r3, r1, #6
 8002e36:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002e3a:	0182      	lsls	r2, r0, #6
 8002e3c:	1a12      	subs	r2, r2, r0
 8002e3e:	eb63 0301 	sbc.w	r3, r3, r1
 8002e42:	f04f 0000 	mov.w	r0, #0
 8002e46:	f04f 0100 	mov.w	r1, #0
 8002e4a:	00d9      	lsls	r1, r3, #3
 8002e4c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002e50:	00d0      	lsls	r0, r2, #3
 8002e52:	4602      	mov	r2, r0
 8002e54:	460b      	mov	r3, r1
 8002e56:	1912      	adds	r2, r2, r4
 8002e58:	eb45 0303 	adc.w	r3, r5, r3
 8002e5c:	f04f 0000 	mov.w	r0, #0
 8002e60:	f04f 0100 	mov.w	r1, #0
 8002e64:	0299      	lsls	r1, r3, #10
 8002e66:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002e6a:	0290      	lsls	r0, r2, #10
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4610      	mov	r0, r2
 8002e72:	4619      	mov	r1, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	461a      	mov	r2, r3
 8002e78:	f04f 0300 	mov.w	r3, #0
 8002e7c:	f7fd f9b6 	bl	80001ec <__aeabi_uldivmod>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4613      	mov	r3, r2
 8002e86:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002e88:	4b0b      	ldr	r3, [pc, #44]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	0c1b      	lsrs	r3, r3, #16
 8002e8e:	f003 0303 	and.w	r3, r3, #3
 8002e92:	3301      	adds	r3, #1
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002e98:	68fa      	ldr	r2, [r7, #12]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea0:	60bb      	str	r3, [r7, #8]
      break;
 8002ea2:	e002      	b.n	8002eaa <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ea4:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002ea6:	60bb      	str	r3, [r7, #8]
      break;
 8002ea8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002eaa:	68bb      	ldr	r3, [r7, #8]
}
 8002eac:	4618      	mov	r0, r3
 8002eae:	3710      	adds	r7, #16
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800
 8002ebc:	00f42400 	.word	0x00f42400
 8002ec0:	007a1200 	.word	0x007a1200

08002ec4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ec4:	b480      	push	{r7}
 8002ec6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ec8:	4b03      	ldr	r3, [pc, #12]	; (8002ed8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eca:	681b      	ldr	r3, [r3, #0]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed4:	4770      	bx	lr
 8002ed6:	bf00      	nop
 8002ed8:	20000008 	.word	0x20000008

08002edc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002edc:	b580      	push	{r7, lr}
 8002ede:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ee0:	f7ff fff0 	bl	8002ec4 <HAL_RCC_GetHCLKFreq>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	0a9b      	lsrs	r3, r3, #10
 8002eec:	f003 0307 	and.w	r3, r3, #7
 8002ef0:	4903      	ldr	r1, [pc, #12]	; (8002f00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ef2:	5ccb      	ldrb	r3, [r1, r3]
 8002ef4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	bd80      	pop	{r7, pc}
 8002efc:	40023800 	.word	0x40023800
 8002f00:	080038ec 	.word	0x080038ec

08002f04 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b083      	sub	sp, #12
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	6078      	str	r0, [r7, #4]
 8002f0c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	220f      	movs	r2, #15
 8002f12:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002f14:	4b12      	ldr	r3, [pc, #72]	; (8002f60 <HAL_RCC_GetClockConfig+0x5c>)
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f003 0203 	and.w	r2, r3, #3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002f20:	4b0f      	ldr	r3, [pc, #60]	; (8002f60 <HAL_RCC_GetClockConfig+0x5c>)
 8002f22:	689b      	ldr	r3, [r3, #8]
 8002f24:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002f2c:	4b0c      	ldr	r3, [pc, #48]	; (8002f60 <HAL_RCC_GetClockConfig+0x5c>)
 8002f2e:	689b      	ldr	r3, [r3, #8]
 8002f30:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002f38:	4b09      	ldr	r3, [pc, #36]	; (8002f60 <HAL_RCC_GetClockConfig+0x5c>)
 8002f3a:	689b      	ldr	r3, [r3, #8]
 8002f3c:	08db      	lsrs	r3, r3, #3
 8002f3e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002f46:	4b07      	ldr	r3, [pc, #28]	; (8002f64 <HAL_RCC_GetClockConfig+0x60>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f003 020f 	and.w	r2, r3, #15
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	601a      	str	r2, [r3, #0]
}
 8002f52:	bf00      	nop
 8002f54:	370c      	adds	r7, #12
 8002f56:	46bd      	mov	sp, r7
 8002f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5c:	4770      	bx	lr
 8002f5e:	bf00      	nop
 8002f60:	40023800 	.word	0x40023800
 8002f64:	40023c00 	.word	0x40023c00

08002f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e041      	b.n	8002ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f80:	b2db      	uxtb	r3, r3
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d106      	bne.n	8002f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f8e:	6878      	ldr	r0, [r7, #4]
 8002f90:	f7fd ffae 	bl	8000ef0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2202      	movs	r2, #2
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	3304      	adds	r3, #4
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	4610      	mov	r0, r2
 8002fa8:	f000 fa96 	bl	80034d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2201      	movs	r2, #1
 8002fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2201      	movs	r2, #1
 8002fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2201      	movs	r2, #1
 8002fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2201      	movs	r2, #1
 8002fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2201      	movs	r2, #1
 8002fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2201      	movs	r2, #1
 8002fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2201      	movs	r2, #1
 8002ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
	...

08003008 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003008:	b480      	push	{r7}
 800300a:	b085      	sub	sp, #20
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003016:	b2db      	uxtb	r3, r3
 8003018:	2b01      	cmp	r3, #1
 800301a:	d001      	beq.n	8003020 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800301c:	2301      	movs	r3, #1
 800301e:	e04e      	b.n	80030be <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	2202      	movs	r2, #2
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68da      	ldr	r2, [r3, #12]
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f042 0201 	orr.w	r2, r2, #1
 8003036:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4a23      	ldr	r2, [pc, #140]	; (80030cc <HAL_TIM_Base_Start_IT+0xc4>)
 800303e:	4293      	cmp	r3, r2
 8003040:	d022      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800304a:	d01d      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	4a1f      	ldr	r2, [pc, #124]	; (80030d0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003052:	4293      	cmp	r3, r2
 8003054:	d018      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	4a1e      	ldr	r2, [pc, #120]	; (80030d4 <HAL_TIM_Base_Start_IT+0xcc>)
 800305c:	4293      	cmp	r3, r2
 800305e:	d013      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a1c      	ldr	r2, [pc, #112]	; (80030d8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d00e      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	4a1b      	ldr	r2, [pc, #108]	; (80030dc <HAL_TIM_Base_Start_IT+0xd4>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d009      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a19      	ldr	r2, [pc, #100]	; (80030e0 <HAL_TIM_Base_Start_IT+0xd8>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d004      	beq.n	8003088 <HAL_TIM_Base_Start_IT+0x80>
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a18      	ldr	r2, [pc, #96]	; (80030e4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003084:	4293      	cmp	r3, r2
 8003086:	d111      	bne.n	80030ac <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	f003 0307 	and.w	r3, r3, #7
 8003092:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	2b06      	cmp	r3, #6
 8003098:	d010      	beq.n	80030bc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f042 0201 	orr.w	r2, r2, #1
 80030a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80030aa:	e007      	b.n	80030bc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	681a      	ldr	r2, [r3, #0]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f042 0201 	orr.w	r2, r2, #1
 80030ba:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80030bc:	2300      	movs	r3, #0
}
 80030be:	4618      	mov	r0, r3
 80030c0:	3714      	adds	r7, #20
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
 80030ca:	bf00      	nop
 80030cc:	40010000 	.word	0x40010000
 80030d0:	40000400 	.word	0x40000400
 80030d4:	40000800 	.word	0x40000800
 80030d8:	40000c00 	.word	0x40000c00
 80030dc:	40010400 	.word	0x40010400
 80030e0:	40014000 	.word	0x40014000
 80030e4:	40001800 	.word	0x40001800

080030e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b082      	sub	sp, #8
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	691b      	ldr	r3, [r3, #16]
 80030f6:	f003 0302 	and.w	r3, r3, #2
 80030fa:	2b02      	cmp	r3, #2
 80030fc:	d122      	bne.n	8003144 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	68db      	ldr	r3, [r3, #12]
 8003104:	f003 0302 	and.w	r3, r3, #2
 8003108:	2b02      	cmp	r3, #2
 800310a:	d11b      	bne.n	8003144 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f06f 0202 	mvn.w	r2, #2
 8003114:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2201      	movs	r2, #1
 800311a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	699b      	ldr	r3, [r3, #24]
 8003122:	f003 0303 	and.w	r3, r3, #3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d003      	beq.n	8003132 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800312a:	6878      	ldr	r0, [r7, #4]
 800312c:	f000 f9b5 	bl	800349a <HAL_TIM_IC_CaptureCallback>
 8003130:	e005      	b.n	800313e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f000 f9a7 	bl	8003486 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f000 f9b8 	bl	80034ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691b      	ldr	r3, [r3, #16]
 800314a:	f003 0304 	and.w	r3, r3, #4
 800314e:	2b04      	cmp	r3, #4
 8003150:	d122      	bne.n	8003198 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	68db      	ldr	r3, [r3, #12]
 8003158:	f003 0304 	and.w	r3, r3, #4
 800315c:	2b04      	cmp	r3, #4
 800315e:	d11b      	bne.n	8003198 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f06f 0204 	mvn.w	r2, #4
 8003168:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800317a:	2b00      	cmp	r3, #0
 800317c:	d003      	beq.n	8003186 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f000 f98b 	bl	800349a <HAL_TIM_IC_CaptureCallback>
 8003184:	e005      	b.n	8003192 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003186:	6878      	ldr	r0, [r7, #4]
 8003188:	f000 f97d 	bl	8003486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f98e 	bl	80034ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2200      	movs	r2, #0
 8003196:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	f003 0308 	and.w	r3, r3, #8
 80031a2:	2b08      	cmp	r3, #8
 80031a4:	d122      	bne.n	80031ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	f003 0308 	and.w	r3, r3, #8
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d11b      	bne.n	80031ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f06f 0208 	mvn.w	r2, #8
 80031bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2204      	movs	r2, #4
 80031c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	f003 0303 	and.w	r3, r3, #3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d003      	beq.n	80031da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f000 f961 	bl	800349a <HAL_TIM_IC_CaptureCallback>
 80031d8:	e005      	b.n	80031e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f953 	bl	8003486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80031e0:	6878      	ldr	r0, [r7, #4]
 80031e2:	f000 f964 	bl	80034ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2200      	movs	r2, #0
 80031ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0310 	and.w	r3, r3, #16
 80031f6:	2b10      	cmp	r3, #16
 80031f8:	d122      	bne.n	8003240 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0310 	and.w	r3, r3, #16
 8003204:	2b10      	cmp	r3, #16
 8003206:	d11b      	bne.n	8003240 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0210 	mvn.w	r2, #16
 8003210:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2208      	movs	r2, #8
 8003216:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69db      	ldr	r3, [r3, #28]
 800321e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003226:	6878      	ldr	r0, [r7, #4]
 8003228:	f000 f937 	bl	800349a <HAL_TIM_IC_CaptureCallback>
 800322c:	e005      	b.n	800323a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f000 f929 	bl	8003486 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f93a 	bl	80034ae <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	691b      	ldr	r3, [r3, #16]
 8003246:	f003 0301 	and.w	r3, r3, #1
 800324a:	2b01      	cmp	r3, #1
 800324c:	d10e      	bne.n	800326c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	68db      	ldr	r3, [r3, #12]
 8003254:	f003 0301 	and.w	r3, r3, #1
 8003258:	2b01      	cmp	r3, #1
 800325a:	d107      	bne.n	800326c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f06f 0201 	mvn.w	r2, #1
 8003264:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003266:	6878      	ldr	r0, [r7, #4]
 8003268:	f7fd fd8c 	bl	8000d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	691b      	ldr	r3, [r3, #16]
 8003272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003276:	2b80      	cmp	r3, #128	; 0x80
 8003278:	d10e      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003284:	2b80      	cmp	r3, #128	; 0x80
 8003286:	d107      	bne.n	8003298 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003290:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003292:	6878      	ldr	r0, [r7, #4]
 8003294:	f000 fae0 	bl	8003858 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032a2:	2b40      	cmp	r3, #64	; 0x40
 80032a4:	d10e      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032b0:	2b40      	cmp	r3, #64	; 0x40
 80032b2:	d107      	bne.n	80032c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80032bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 f8ff 	bl	80034c2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	691b      	ldr	r3, [r3, #16]
 80032ca:	f003 0320 	and.w	r3, r3, #32
 80032ce:	2b20      	cmp	r3, #32
 80032d0:	d10e      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	f003 0320 	and.w	r3, r3, #32
 80032dc:	2b20      	cmp	r3, #32
 80032de:	d107      	bne.n	80032f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f06f 0220 	mvn.w	r2, #32
 80032e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80032ea:	6878      	ldr	r0, [r7, #4]
 80032ec:	f000 faaa 	bl	8003844 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80032f0:	bf00      	nop
 80032f2:	3708      	adds	r7, #8
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800330c:	2b01      	cmp	r3, #1
 800330e:	d101      	bne.n	8003314 <HAL_TIM_ConfigClockSource+0x1c>
 8003310:	2302      	movs	r3, #2
 8003312:	e0b4      	b.n	800347e <HAL_TIM_ConfigClockSource+0x186>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2201      	movs	r2, #1
 8003318:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2202      	movs	r2, #2
 8003320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800332c:	68bb      	ldr	r3, [r7, #8]
 800332e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003332:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003334:	68bb      	ldr	r3, [r7, #8]
 8003336:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800333a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800334c:	d03e      	beq.n	80033cc <HAL_TIM_ConfigClockSource+0xd4>
 800334e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003352:	f200 8087 	bhi.w	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003356:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800335a:	f000 8086 	beq.w	800346a <HAL_TIM_ConfigClockSource+0x172>
 800335e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003362:	d87f      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003364:	2b70      	cmp	r3, #112	; 0x70
 8003366:	d01a      	beq.n	800339e <HAL_TIM_ConfigClockSource+0xa6>
 8003368:	2b70      	cmp	r3, #112	; 0x70
 800336a:	d87b      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 800336c:	2b60      	cmp	r3, #96	; 0x60
 800336e:	d050      	beq.n	8003412 <HAL_TIM_ConfigClockSource+0x11a>
 8003370:	2b60      	cmp	r3, #96	; 0x60
 8003372:	d877      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003374:	2b50      	cmp	r3, #80	; 0x50
 8003376:	d03c      	beq.n	80033f2 <HAL_TIM_ConfigClockSource+0xfa>
 8003378:	2b50      	cmp	r3, #80	; 0x50
 800337a:	d873      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 800337c:	2b40      	cmp	r3, #64	; 0x40
 800337e:	d058      	beq.n	8003432 <HAL_TIM_ConfigClockSource+0x13a>
 8003380:	2b40      	cmp	r3, #64	; 0x40
 8003382:	d86f      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003384:	2b30      	cmp	r3, #48	; 0x30
 8003386:	d064      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x15a>
 8003388:	2b30      	cmp	r3, #48	; 0x30
 800338a:	d86b      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 800338c:	2b20      	cmp	r3, #32
 800338e:	d060      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x15a>
 8003390:	2b20      	cmp	r3, #32
 8003392:	d867      	bhi.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
 8003394:	2b00      	cmp	r3, #0
 8003396:	d05c      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x15a>
 8003398:	2b10      	cmp	r3, #16
 800339a:	d05a      	beq.n	8003452 <HAL_TIM_ConfigClockSource+0x15a>
 800339c:	e062      	b.n	8003464 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6818      	ldr	r0, [r3, #0]
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	6899      	ldr	r1, [r3, #8]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	685a      	ldr	r2, [r3, #4]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	68db      	ldr	r3, [r3, #12]
 80033ae:	f000 f9ad 	bl	800370c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033ba:	68bb      	ldr	r3, [r7, #8]
 80033bc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80033c0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	609a      	str	r2, [r3, #8]
      break;
 80033ca:	e04f      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	6818      	ldr	r0, [r3, #0]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	6899      	ldr	r1, [r3, #8]
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685a      	ldr	r2, [r3, #4]
 80033d8:	683b      	ldr	r3, [r7, #0]
 80033da:	68db      	ldr	r3, [r3, #12]
 80033dc:	f000 f996 	bl	800370c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	689a      	ldr	r2, [r3, #8]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80033ee:	609a      	str	r2, [r3, #8]
      break;
 80033f0:	e03c      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	6859      	ldr	r1, [r3, #4]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	68db      	ldr	r3, [r3, #12]
 80033fe:	461a      	mov	r2, r3
 8003400:	f000 f90a 	bl	8003618 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2150      	movs	r1, #80	; 0x50
 800340a:	4618      	mov	r0, r3
 800340c:	f000 f963 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 8003410:	e02c      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	461a      	mov	r2, r3
 8003420:	f000 f929 	bl	8003676 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2160      	movs	r1, #96	; 0x60
 800342a:	4618      	mov	r0, r3
 800342c:	f000 f953 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 8003430:	e01c      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	6818      	ldr	r0, [r3, #0]
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	6859      	ldr	r1, [r3, #4]
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	68db      	ldr	r3, [r3, #12]
 800343e:	461a      	mov	r2, r3
 8003440:	f000 f8ea 	bl	8003618 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	2140      	movs	r1, #64	; 0x40
 800344a:	4618      	mov	r0, r3
 800344c:	f000 f943 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 8003450:	e00c      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681a      	ldr	r2, [r3, #0]
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4619      	mov	r1, r3
 800345c:	4610      	mov	r0, r2
 800345e:	f000 f93a 	bl	80036d6 <TIM_ITRx_SetConfig>
      break;
 8003462:	e003      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003464:	2301      	movs	r3, #1
 8003466:	73fb      	strb	r3, [r7, #15]
      break;
 8003468:	e000      	b.n	800346c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800346a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2201      	movs	r2, #1
 8003470:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800347c:	7bfb      	ldrb	r3, [r7, #15]
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003486:	b480      	push	{r7}
 8003488:	b083      	sub	sp, #12
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800348e:	bf00      	nop
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr

0800349a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800349a:	b480      	push	{r7}
 800349c:	b083      	sub	sp, #12
 800349e:	af00      	add	r7, sp, #0
 80034a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80034a2:	bf00      	nop
 80034a4:	370c      	adds	r7, #12
 80034a6:	46bd      	mov	sp, r7
 80034a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ac:	4770      	bx	lr

080034ae <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80034ae:	b480      	push	{r7}
 80034b0:	b083      	sub	sp, #12
 80034b2:	af00      	add	r7, sp, #0
 80034b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80034b6:	bf00      	nop
 80034b8:	370c      	adds	r7, #12
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr

080034c2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80034c2:	b480      	push	{r7}
 80034c4:	b083      	sub	sp, #12
 80034c6:	af00      	add	r7, sp, #0
 80034c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80034ca:	bf00      	nop
 80034cc:	370c      	adds	r7, #12
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr
	...

080034d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	4a40      	ldr	r2, [pc, #256]	; (80035ec <TIM_Base_SetConfig+0x114>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d013      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034f6:	d00f      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	4a3d      	ldr	r2, [pc, #244]	; (80035f0 <TIM_Base_SetConfig+0x118>)
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d00b      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	4a3c      	ldr	r2, [pc, #240]	; (80035f4 <TIM_Base_SetConfig+0x11c>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d007      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	4a3b      	ldr	r2, [pc, #236]	; (80035f8 <TIM_Base_SetConfig+0x120>)
 800350c:	4293      	cmp	r3, r2
 800350e:	d003      	beq.n	8003518 <TIM_Base_SetConfig+0x40>
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	4a3a      	ldr	r2, [pc, #232]	; (80035fc <TIM_Base_SetConfig+0x124>)
 8003514:	4293      	cmp	r3, r2
 8003516:	d108      	bne.n	800352a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800351e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	68fa      	ldr	r2, [r7, #12]
 8003526:	4313      	orrs	r3, r2
 8003528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	4a2f      	ldr	r2, [pc, #188]	; (80035ec <TIM_Base_SetConfig+0x114>)
 800352e:	4293      	cmp	r3, r2
 8003530:	d02b      	beq.n	800358a <TIM_Base_SetConfig+0xb2>
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003538:	d027      	beq.n	800358a <TIM_Base_SetConfig+0xb2>
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	4a2c      	ldr	r2, [pc, #176]	; (80035f0 <TIM_Base_SetConfig+0x118>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d023      	beq.n	800358a <TIM_Base_SetConfig+0xb2>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a2b      	ldr	r2, [pc, #172]	; (80035f4 <TIM_Base_SetConfig+0x11c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d01f      	beq.n	800358a <TIM_Base_SetConfig+0xb2>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a2a      	ldr	r2, [pc, #168]	; (80035f8 <TIM_Base_SetConfig+0x120>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d01b      	beq.n	800358a <TIM_Base_SetConfig+0xb2>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a29      	ldr	r2, [pc, #164]	; (80035fc <TIM_Base_SetConfig+0x124>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d017      	beq.n	800358a <TIM_Base_SetConfig+0xb2>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a28      	ldr	r2, [pc, #160]	; (8003600 <TIM_Base_SetConfig+0x128>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d013      	beq.n	800358a <TIM_Base_SetConfig+0xb2>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a27      	ldr	r2, [pc, #156]	; (8003604 <TIM_Base_SetConfig+0x12c>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d00f      	beq.n	800358a <TIM_Base_SetConfig+0xb2>
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	4a26      	ldr	r2, [pc, #152]	; (8003608 <TIM_Base_SetConfig+0x130>)
 800356e:	4293      	cmp	r3, r2
 8003570:	d00b      	beq.n	800358a <TIM_Base_SetConfig+0xb2>
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4a25      	ldr	r2, [pc, #148]	; (800360c <TIM_Base_SetConfig+0x134>)
 8003576:	4293      	cmp	r3, r2
 8003578:	d007      	beq.n	800358a <TIM_Base_SetConfig+0xb2>
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	4a24      	ldr	r2, [pc, #144]	; (8003610 <TIM_Base_SetConfig+0x138>)
 800357e:	4293      	cmp	r3, r2
 8003580:	d003      	beq.n	800358a <TIM_Base_SetConfig+0xb2>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a23      	ldr	r2, [pc, #140]	; (8003614 <TIM_Base_SetConfig+0x13c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d108      	bne.n	800359c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	68fa      	ldr	r2, [r7, #12]
 8003598:	4313      	orrs	r3, r2
 800359a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	68fa      	ldr	r2, [r7, #12]
 80035ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	689a      	ldr	r2, [r3, #8]
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035b8:	683b      	ldr	r3, [r7, #0]
 80035ba:	681a      	ldr	r2, [r3, #0]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	4a0a      	ldr	r2, [pc, #40]	; (80035ec <TIM_Base_SetConfig+0x114>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d003      	beq.n	80035d0 <TIM_Base_SetConfig+0xf8>
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a0c      	ldr	r2, [pc, #48]	; (80035fc <TIM_Base_SetConfig+0x124>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d103      	bne.n	80035d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	691a      	ldr	r2, [r3, #16]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	615a      	str	r2, [r3, #20]
}
 80035de:	bf00      	nop
 80035e0:	3714      	adds	r7, #20
 80035e2:	46bd      	mov	sp, r7
 80035e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e8:	4770      	bx	lr
 80035ea:	bf00      	nop
 80035ec:	40010000 	.word	0x40010000
 80035f0:	40000400 	.word	0x40000400
 80035f4:	40000800 	.word	0x40000800
 80035f8:	40000c00 	.word	0x40000c00
 80035fc:	40010400 	.word	0x40010400
 8003600:	40014000 	.word	0x40014000
 8003604:	40014400 	.word	0x40014400
 8003608:	40014800 	.word	0x40014800
 800360c:	40001800 	.word	0x40001800
 8003610:	40001c00 	.word	0x40001c00
 8003614:	40002000 	.word	0x40002000

08003618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003618:	b480      	push	{r7}
 800361a:	b087      	sub	sp, #28
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	6a1b      	ldr	r3, [r3, #32]
 8003628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	6a1b      	ldr	r3, [r3, #32]
 800362e:	f023 0201 	bic.w	r2, r3, #1
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	011b      	lsls	r3, r3, #4
 8003648:	693a      	ldr	r2, [r7, #16]
 800364a:	4313      	orrs	r3, r2
 800364c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	f023 030a 	bic.w	r3, r3, #10
 8003654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003656:	697a      	ldr	r2, [r7, #20]
 8003658:	68bb      	ldr	r3, [r7, #8]
 800365a:	4313      	orrs	r3, r2
 800365c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	693a      	ldr	r2, [r7, #16]
 8003662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	697a      	ldr	r2, [r7, #20]
 8003668:	621a      	str	r2, [r3, #32]
}
 800366a:	bf00      	nop
 800366c:	371c      	adds	r7, #28
 800366e:	46bd      	mov	sp, r7
 8003670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003674:	4770      	bx	lr

08003676 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003676:	b480      	push	{r7}
 8003678:	b087      	sub	sp, #28
 800367a:	af00      	add	r7, sp, #0
 800367c:	60f8      	str	r0, [r7, #12]
 800367e:	60b9      	str	r1, [r7, #8]
 8003680:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	6a1b      	ldr	r3, [r3, #32]
 8003686:	f023 0210 	bic.w	r2, r3, #16
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	699b      	ldr	r3, [r3, #24]
 8003692:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80036a0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	031b      	lsls	r3, r3, #12
 80036a6:	697a      	ldr	r2, [r7, #20]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80036b2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	697a      	ldr	r2, [r7, #20]
 80036c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	693a      	ldr	r2, [r7, #16]
 80036c8:	621a      	str	r2, [r3, #32]
}
 80036ca:	bf00      	nop
 80036cc:	371c      	adds	r7, #28
 80036ce:	46bd      	mov	sp, r7
 80036d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d4:	4770      	bx	lr

080036d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80036d6:	b480      	push	{r7}
 80036d8:	b085      	sub	sp, #20
 80036da:	af00      	add	r7, sp, #0
 80036dc:	6078      	str	r0, [r7, #4]
 80036de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80036ee:	683a      	ldr	r2, [r7, #0]
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	f043 0307 	orr.w	r3, r3, #7
 80036f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	68fa      	ldr	r2, [r7, #12]
 80036fe:	609a      	str	r2, [r3, #8]
}
 8003700:	bf00      	nop
 8003702:	3714      	adds	r7, #20
 8003704:	46bd      	mov	sp, r7
 8003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370a:	4770      	bx	lr

0800370c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800370c:	b480      	push	{r7}
 800370e:	b087      	sub	sp, #28
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
 8003718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	021a      	lsls	r2, r3, #8
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	431a      	orrs	r2, r3
 8003730:	68bb      	ldr	r3, [r7, #8]
 8003732:	4313      	orrs	r3, r2
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	4313      	orrs	r3, r2
 8003738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	697a      	ldr	r2, [r7, #20]
 800373e:	609a      	str	r2, [r3, #8]
}
 8003740:	bf00      	nop
 8003742:	371c      	adds	r7, #28
 8003744:	46bd      	mov	sp, r7
 8003746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374a:	4770      	bx	lr

0800374c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800374c:	b480      	push	{r7}
 800374e:	b085      	sub	sp, #20
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800375c:	2b01      	cmp	r3, #1
 800375e:	d101      	bne.n	8003764 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003760:	2302      	movs	r3, #2
 8003762:	e05a      	b.n	800381a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2201      	movs	r2, #1
 8003768:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2202      	movs	r2, #2
 8003770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800378a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4313      	orrs	r3, r2
 8003794:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	68fa      	ldr	r2, [r7, #12]
 800379c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a21      	ldr	r2, [pc, #132]	; (8003828 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d022      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b0:	d01d      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	4a1d      	ldr	r2, [pc, #116]	; (800382c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80037b8:	4293      	cmp	r3, r2
 80037ba:	d018      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	4a1b      	ldr	r2, [pc, #108]	; (8003830 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80037c2:	4293      	cmp	r3, r2
 80037c4:	d013      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	4a1a      	ldr	r2, [pc, #104]	; (8003834 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80037cc:	4293      	cmp	r3, r2
 80037ce:	d00e      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	4a18      	ldr	r2, [pc, #96]	; (8003838 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d009      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	4a17      	ldr	r2, [pc, #92]	; (800383c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	d004      	beq.n	80037ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a15      	ldr	r2, [pc, #84]	; (8003840 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80037ea:	4293      	cmp	r3, r2
 80037ec:	d10c      	bne.n	8003808 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80037f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	4313      	orrs	r3, r2
 80037fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	68ba      	ldr	r2, [r7, #8]
 8003806:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3714      	adds	r7, #20
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40010000 	.word	0x40010000
 800382c:	40000400 	.word	0x40000400
 8003830:	40000800 	.word	0x40000800
 8003834:	40000c00 	.word	0x40000c00
 8003838:	40010400 	.word	0x40010400
 800383c:	40014000 	.word	0x40014000
 8003840:	40001800 	.word	0x40001800

08003844 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003860:	bf00      	nop
 8003862:	370c      	adds	r7, #12
 8003864:	46bd      	mov	sp, r7
 8003866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386a:	4770      	bx	lr

0800386c <__libc_init_array>:
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	4d0d      	ldr	r5, [pc, #52]	; (80038a4 <__libc_init_array+0x38>)
 8003870:	4c0d      	ldr	r4, [pc, #52]	; (80038a8 <__libc_init_array+0x3c>)
 8003872:	1b64      	subs	r4, r4, r5
 8003874:	10a4      	asrs	r4, r4, #2
 8003876:	2600      	movs	r6, #0
 8003878:	42a6      	cmp	r6, r4
 800387a:	d109      	bne.n	8003890 <__libc_init_array+0x24>
 800387c:	4d0b      	ldr	r5, [pc, #44]	; (80038ac <__libc_init_array+0x40>)
 800387e:	4c0c      	ldr	r4, [pc, #48]	; (80038b0 <__libc_init_array+0x44>)
 8003880:	f000 f820 	bl	80038c4 <_init>
 8003884:	1b64      	subs	r4, r4, r5
 8003886:	10a4      	asrs	r4, r4, #2
 8003888:	2600      	movs	r6, #0
 800388a:	42a6      	cmp	r6, r4
 800388c:	d105      	bne.n	800389a <__libc_init_array+0x2e>
 800388e:	bd70      	pop	{r4, r5, r6, pc}
 8003890:	f855 3b04 	ldr.w	r3, [r5], #4
 8003894:	4798      	blx	r3
 8003896:	3601      	adds	r6, #1
 8003898:	e7ee      	b.n	8003878 <__libc_init_array+0xc>
 800389a:	f855 3b04 	ldr.w	r3, [r5], #4
 800389e:	4798      	blx	r3
 80038a0:	3601      	adds	r6, #1
 80038a2:	e7f2      	b.n	800388a <__libc_init_array+0x1e>
 80038a4:	08003904 	.word	0x08003904
 80038a8:	08003904 	.word	0x08003904
 80038ac:	08003904 	.word	0x08003904
 80038b0:	08003908 	.word	0x08003908

080038b4 <memset>:
 80038b4:	4402      	add	r2, r0
 80038b6:	4603      	mov	r3, r0
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d100      	bne.n	80038be <memset+0xa>
 80038bc:	4770      	bx	lr
 80038be:	f803 1b01 	strb.w	r1, [r3], #1
 80038c2:	e7f9      	b.n	80038b8 <memset+0x4>

080038c4 <_init>:
 80038c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038c6:	bf00      	nop
 80038c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038ca:	bc08      	pop	{r3}
 80038cc:	469e      	mov	lr, r3
 80038ce:	4770      	bx	lr

080038d0 <_fini>:
 80038d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80038d2:	bf00      	nop
 80038d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80038d6:	bc08      	pop	{r3}
 80038d8:	469e      	mov	lr, r3
 80038da:	4770      	bx	lr
